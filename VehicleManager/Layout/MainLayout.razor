@inherits LayoutComponentBase
@using VehicleManager.Components
@using VehicleManager.Services
@using VehicleManager.Shared
@using System.Reflection;

@inject NavigationManager NavigationManager
@inject AppData appData
@inject IJSRuntime JSRuntime

<CascadingValue Value="this">
    <div class="page @Background">
        @if (ShowNavMenu != false) {
            <div class="sidebar" style="@IconMenuCssClass">
                <NavMenu ShowIconMenu="ToggleIconMenu" />
            </div>
        }

        <main>
            <div class="top-row px-4">
                <div class="row h-100">
                    <div class="d-flex justify-content-center align-items-center">
                        <div class="col align-content-center d-none d-xl-inline">
                        </div>
                        <div class="col-auto text-left text-xl-center">
                            <img class="img-fluid rounded LogoHeader ms-auto me-auto" src="images/BrokenMotorLogo.png" title="Broken Motor Logo" />
                        </div>
                        <div class="col align-content-center text-sm-end d-none d-sm-block">
                            @if (appData?.CurrentUser?.Email != null)
                            {
                                <span class="me-lg-2 d-none d-lg-inline">Logged In As</span> <span class="btn btn-outline-primary me-lg-3"><i class="fa-solid fa-user"></i> @appData.CurrentUser.Forename @appData.CurrentUser.Surname</span>
                                <NavLink class="btn btn-primary" href="Logout">
                                    <i class="fa-solid fa-person-walking-dashed-line-arrow-right"></i> Log Out
                                </NavLink>
                            }
                            else
                            {
                                if (ShowNavMenu != false)
                                {
                                    <NavLink class="btn btn-primary" href="Login">
                                        <i class="fa-solid fa-lock"></i> Login
                                    </NavLink>
                                }
                            }
                        </div>
                        <div class="col align-content-center text-end d-block d-sm-none">
                            @if (appData?.CurrentUser?.Email != null)
                            {
                                <span class="btn btn-sml btn-outline-primary"><i class="fa-solid fa-user"></i> @appData.CurrentUser.Forename <span class="d-none d-sm-inline">@appData.CurrentUser.Surname</span></span>
                            }
                            else
                            {
                                if (ShowNavMenu != false)
                                {
                                    <NavLink class="btn btn-primary" href="Login">
                                        <i class="fa-solid fa-lock"></i> Login
                                    </NavLink>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <article class="content px-4">
                <Toast @ref="toastNewVersionAvailable" ToastRef="toastNewVersionAvailable">
                    <Title>
                        <i class="fa-solid fa-download"></i> <strong class="me-auto"> @toastNewVersionAvailableTitle</strong>
                    </Title>
                    <Subtitle>
                        @toastNewVersionAvailableSubtitle
                    </Subtitle>
                    <Body>
                        @toastNewVersionAvailableText
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => ServiceWorkerFunctions.UpdateServiceWorker(JSRuntime, NavigationManager)" data-bs-dismiss="toast"><i class="fa-solid fa-square-check"></i> Update to Latest Version</button>
                        <button type="button" class="btn btn-danger btn-sm" data-bs-dismiss="toast"><i class="fa-solid fa-square-xmark"></i> Ignore</button>
                    </Footer>
                </Toast>

                @Body
            </article>
        </main>
    </div>
</CascadingValue>

@code {
    private string? PageAndParams;
    private string? PageRef;
    private string? Background;
    public bool? ShowNavMenu { get; set; }

    private bool _iconMenuActive { get; set; }
    private string? IconMenuCssClass => _iconMenuActive ? "width: 82px;" : null;

    private Toast? toastNewVersionAvailable { get; set; }
    public string? toastNewVersionAvailableTitle = null;
    public string? toastNewVersionAvailableSubtitle = null;
    public MarkupString? toastNewVersionAvailableText = null;

    protected override async Task OnInitializedAsync()
    {
        ShowNav();

        ApplyBackground();

        ActiveVersion = await ServiceWorkerFunctions.GetCurrentVersionNumber(JSRuntime);

        //Run this each time the location changes
        NavigationManager.LocationChanged += OnLocationChanged;

        toastNewVersionAvailableTitle = "New Version Available";
        toastNewVersionAvailableSubtitle = $"Version {ProductVersion}";
        toastNewVersionAvailableText = (MarkupString)$"Version {ProductVersion} of Vehicle Manager is now available and you are running {ActiveVersion}. To avoid any errors please update to the latest version as soon as possible";
        toastNewVersionAvailable?.DisableAutohide();
    }

    public void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        ShowNav();

        ApplyBackground();

        StateHasChanged();
    }
    
    public void HideNav()
    {
        ShowNavMenu = false;
        StateHasChanged();
    }

    public void ShowNav()
    {
        ShowNavMenu = true;
        StateHasChanged();
    }

    //Toggle full or icon sidebar
    protected void ToggleIconMenu(bool iconMenuActive)
    {
        _iconMenuActive = iconMenuActive;
    }

    public void ApplyBackground()
    {
        PageAndParams = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
        if (PageAndParams.IndexOf("/") > 0)
        {
            PageRef = PageAndParams.Substring(0, PageAndParams.IndexOf("/"));
        }
        else
        {
            PageRef = PageAndParams;
        }

        if (PageRef == "Login" || PageRef == "Logout")
        {
            Background = "BackgroundEffect";
        }
        else
        {
            Background = "";
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private string? ActiveVersion { get; set; }
    private string? ProductVersion = Assembly.GetExecutingAssembly().GetName().Version?.ToString();

    private async Task SetVersionNumber()
    {
        await JSRuntime.InvokeVoidAsync("serviceWorkerInterop.setVersionNumber", ProductVersion);
    }

    private async Task GetCurrentVersionNumber()
    {
        try
        {
            ActiveVersion = await JSRuntime.InvokeAsync<string>("serviceWorkerInterop.getVersionNumber");
        }
        catch
        {
            ActiveVersion = ProductVersion;
        }
    }
}