@page "/Messages"
@page "/Messages/{MessageID}"

@using VehicleManager.Models
@using VehicleManager.Services
@using VehicleManager.Shared
@using System.Net
@using Microsoft.AspNetCore.Components.QuickGrid
@using TinyMCE.Blazor
@using System.Globalization
@using System.Reflection
@using System.Linq.Expressions

@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<MessageTemplateModel> Logger
@inject AppData appData

<PageTitle>Messages @@ Broken Motor</PageTitle>

<audio src="@soundEffect" autoplay></audio>

<Modal @ref="modalInfo">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        <p>
            @msgInfo
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalInfo!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalError!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null)
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalConfirm!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<h3><i class="fa-solid fa-envelopes-bulk"></i> Messages</h3>

@if (loadDataErrorMsg != null) 
{
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="alert alert-danger hstack gap-3" role="alert">
                    <div>
                        <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                    </div>
                    <div>
                        <p>
                            @loadDataErrorMsg
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (mainRecords == null)
{
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="alert alert-primary text-center" role="alert">
                    <h1>
                        <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                    </h1>
                </div>
            </div>
        </div>
    </div>
}
else {
    <div class="container-fluid">
        <div class="row">
            <div class="col-md TableArea pt-3 rounded">
                <div class="alert alert-primary" role="alert">
                    @if (filterMainValues.Count > 0)
                    {
                        <button type="button" class="btn btn-primary btn-sm me-3" @onclick="@RemoveFilters">Filters (Clear) <i class="fa-solid fa-filter-circle-xmark"></i></button>

                        int filterNumber = 0;
                        @foreach (var filter in filterMainValues)
                        {
                            string filterName = filter.Key;
                            string filterValue = filter.Value?.ToString() ?? string.Empty;

                            filterNumber += 1;

                            @if (filterNumber > 1) {
                                <span class="ps-1 pe-1">, </span>
                            }
                            <kbd><i class="fa-solid fa-filter"></i> @filterName = @filterValue</kbd>
                        }
                    }
                </div>
                <div class="TableContainer">
                    <div class="table-responsive">
                        <QuickGrid Items="@FilteredMainRecords" Virtualize="true" Class="table table-striped table-hover table-bordered" TGridItem="MessageModel">

                            <TemplateColumn Title="" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.MessageID)">
                                <button type="button" class="btn btn-primary btn-sm" @onclick="()=>EditMainRecord(context.MessageID)"><i class="fa-solid fa-up-right-from-square"></i></button>
                            </TemplateColumn>

                            <TemplateColumn Title="ID" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.MessageID)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.MessageID</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="number" class="form-control" placeholder="Enter Number..." autofocus
                                        @bind-value:get="GetFilter(nameof(MessageModel.MessageID))"
                                        @bind-value:set="(e) => ChangeFilterMain(nameof(MessageModel.MessageID), e)"
                                        @oninput="(e) => ChangeFilterMain(nameof(MessageModel.MessageID), e.Value)" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Type" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => (x.MessageTypeID))">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context?.MessageTypeID?.GetEnumDisplayName()</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        @{
                                            IList<MessageType> MessageTypes = Enum.GetValues(typeof(MessageType)).Cast<MessageType>().ToList();
                                        }
                                        <select class="form-select" autofocus 
                                        value="@GetFilter(nameof(MessageModel.MessageTypeID))"
                                        @onchange="(e) => ChangeFilterMain(nameof(MessageModel.MessageTypeID), e.Value)">
                                            <option value="">-- Please Select --</option>
                                            @if (MessageTypes != null)
                                            {
                                                foreach (var type in MessageTypes)
                                                {
                                                    <option value="@type">@type.GetEnumDisplayName()</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Template" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => (x.MessageTemplate != null ? x.MessageTemplate.Name : string.Empty))">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.MessageTemplate?.Name</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <select class="form-select" autofocus 
                                        value="@GetFilter(nameof(MessageModel.MessageTemplate) + '.' + nameof(MessageTemplateModel.MessageTemplateID))"
                                        @onchange="(e) => ChangeFilterMain(nameof(MessageModel.MessageTemplate) + '.' + nameof(MessageTemplateModel.MessageTemplateID), e.Value)">
                                            <option value="">-- Please Select --</option>
                                            @if (messageTemplates != null)
                                            {
                                                foreach (var template in messageTemplates)
                                                {
                                                    <option value="@template.MessageTemplateID">@template.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Subject" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.Subject)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.Subject</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" placeholder="Enter Text..." autofocus
                                        @bind-value:get="GetFilter(nameof(MessageModel.Subject))"
                                        @bind-value:set="(e) => ChangeFilterMain(nameof(MessageModel.Subject), e)"
                                        @oninput="(e) => ChangeFilterMain(nameof(MessageModel.Subject), e.Value)" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Vehicle ID" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.VehicleID)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.VehicleID</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="number" class="form-control" autofocus @bind="FilterMainVehicleID" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="&pound; Offered" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.AmountOffered)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start text-center">
                                            <h5 class="pt-1 pb-0 mb-0">
                                                <span class="badge @(context!.IsAccepted == true? "text-bg-success" : "text-bg-danger")">
                                                    @(context?.AmountOffered == null ? "" : context?.AmountOffered.Value.ToString("C0", new CultureInfo("en-GB")))
                                                </span>
                                            </h5>
                                        </div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="number" class="form-control" autofocus @bind="FilterMainAmountOffered" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Accepted?" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.IsAccepted)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start text-center">
                                            <i class="@CSSFunctions.BoolCSS(context.IsAccepted)"></i>
                                        </div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <button type="button" class="btn @(FilterMainIsAccepted == true? "btn-primary" : "btn-outline-primary")" 
                                        value="@GetFilterBool(nameof(MessageModel.IsAccepted))"
                                        @onclick="(e) => ChangeFilterMain(nameof(MessageModel.IsAccepted), true)">
                                            <i class="@(GetFilterBool(nameof(MessageModel.IsAccepted)) == null? "fa-regular fa-square-minus" : GetFilterBool(nameof(MessageModel.IsAccepted)) == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i>
                                        </button>
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="From" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.From)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.From</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" autofocus @bind="FilterMainFrom" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="From Name" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.FromName)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.FromName</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" autofocus @bind="FilterMainFromName" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="To" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.To)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.To</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" autofocus @bind="FilterMainTo" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="To Name" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.ToName)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.ToName</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" autofocus @bind="FilterMainToName" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Sent?" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.IsSent)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start text-center">
                                            <i class="@CSSFunctions.BoolCSS(context.IsSent)"></i>
                                        </div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <button type="button" class="btn @(FilterMainIsSent == true? "btn-primary" : "btn-outline-primary")" @onclick="ToggleFilterMainIsSent"><i class="@(FilterMainIsSent == null? "fa-regular fa-square-minus" : FilterMainIsSent == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Sent Date" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.SentDate)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@(context?.SentDate == null ? "" : context?.SentDate.Value.ToString("dd/MM/yyyy"))</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="date" class="form-control" placeholder="Enter Number..." autofocus
                                        @bind-value:get="GetFilterDate(nameof(MessageModel.SentDate))"
                                        @bind-value:set="(e) => ChangeFilterMain(nameof(MessageModel.SentDate), e)"
                                        @oninput="(e) => ChangeFilterMain(nameof(MessageModel.SentDate), e.Value)" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Status" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.MessageStatusID)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context?.MessageStatusID?.GetEnumDisplayName()</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" autofocus @bind="FilterMainMessageStatus" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Unique Customer Reference" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.MessageID)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.MessageGUID</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="text" class="form-control" autofocus @bind="FilterMainMessageGUID" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Created By" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.CreatedBy)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.CreatedBy</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainCreatedBy" @bind:event="oninput" placeholder="Created By..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Created Date" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.CreatedDate)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@(context?.CreatedDate == null ? "" : context?.CreatedDate.Value.ToString("dd/MM/yyyy"))</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="date" class="form-control" autofocus @bind="FilterMainCreatedDate" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Last Updated By" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.LastUpdatedBy)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.LastUpdatedBy</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainLastUpdatedBy" @bind:event="oninput" placeholder="Last Updated By..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Last Updated Date" Sortable="true" SortBy="GridSort<MessageModel>.ByAscending(x => x.LastUpdatedDate)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@(context?.CreatedDate == null ? "" : context?.CreatedDate.Value.ToString("dd/MM/yyyy"))</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="date" class="form-control" autofocus @bind="FilterMainLastUpdatedDate" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>
                        </QuickGrid>
                        @{
                            IList<string> ExcludeMainFields = new List<string> { "Message", "MessageIsHTML", "CC", "BCC" };
                        }
                        <Grid Items="@FilteredMainRecords" ExcludeFields="@ExcludeMainFields" SelectedItemID="selectedRecord?.MessageID" OnSelectItem="SelectMainRecord" OnEditItem="EditMainRecord" />
                    </div>
                </div>
                <div class="alert alert-secondary" role="alert">
                    <div class="row">
                        <div class="col-md">
                            <div class="d-grid gap-2 d-md-block text-start">
                                <button type="button" class="btn btn-primary me-md-3" @onclick="()=>EditMainRecord(null)"><i class="fa-solid fa-square-plus"></i> New...</button>
                                <button type="button" class="btn btn-danger me-md-3" @onclick="DeleteMainRecordConfirm" disabled="@(selectedRecord?.MessageID == 0 ? true : false)"><i class="fa-solid fa-trash-can"></i> Delete...</button>
                                @if (selectedRecord?.MessageID > 0) {
                                    <span>1 Record Selected</span>
                                }
                            </div>
                        </div>
                        <div class="col-md text-end">

                            @if (filterMainValues.Count > 0)
                            {
                                <div class="col-md text-end fw-bold text-primary">
                                    @FilteredMainRecords?.Count() Records (Filtered)
                                </div>
                            }
                            else {
                                <div class="col-md text-end">
                                    @FilteredMainRecords?.Count() Records
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <Modal @ref="modalMessage">
        <WindowControls>
            @if (selectedRecordChanges?.Count > 0)
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelMainRecordConfirm"></button>
            }
            else
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalMessage!.Close()"></button>
            }
        </WindowControls>
        <Title>
            @if (@selectedRecordCopy?.MessageID > 0)
            {
                @:<i class="fa-solid fa-message"></i> Message @selectedRecordCopy?.MessageID
            }
            else {
                @:<i class="fa-solid fa-message"></i> New Message
            }
        </Title>
        <Body>
            <EditForm EditContext="@EditContextMain" OnValidSubmit="() => SaveMainRecord(true)">
                <FluentValidationValidator @ref="_fluentValidationValidator" />
                <div class="bd-callout bd-callout-VM bd-callout-grey GreyBackground">
                    <div class="container">

                        @if (selectedRecordCopy == null) {
                            <div class="row">
                                <div class="col-md">
                                    <div class="alert alert-primary text-center" role="alert">
                                        <h1>
                                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                                        </h1>
                                    </div>
                                </div>
                            </div>
                        }
                        else {

                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> From</label>
                                        </div>
                                        <div class="col-md-8">
                                            <InputText @bind-Value="selectedRecordCopy!.FromName" class="form-control" placeholder="Name" />
                                            <ValidationMessage For="@(() => selectedRecordCopy!.FromName)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md">
                                    <InputText @bind-Value="selectedRecordCopy!.From" class="form-control" placeholder="Email" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.From)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> To</label>
                                        </div>
                                        <div class="col-md-8">
                                            <InputText @bind-Value="selectedRecordCopy!.ToName" class="form-control"  placeholder="Name" />
                                            <ValidationMessage For="@(() => selectedRecordCopy!.ToName)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md">
                                    <InputText @bind-Value="selectedRecordCopy!.To" class="form-control" placeholder="Email" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.To)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-2">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Template</label>
                                </div>
                                <div class="col-md-10">
                                    @if (selectedRecordCopy!.MessageTemplate != null)
                                    {
                                        <InputSelect @bind-Value="selectedRecordCopy!.MessageTemplate!.MessageTemplateID" class="form-select">
                                            <option value="">-- Please Select --</option>
                                            @if (messageTemplates != null)
                                            {
                                                foreach (var template in messageTemplates)
                                                {
                                                    <option value="@template.MessageTemplateID">@template.Name</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => selectedRecordCopy!.MessageTemplate.MessageTemplateID)" />
                                    }

                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-2">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Subject</label>
                                </div>
                                <div class="col-md-10">
                                    <InputText @bind-Value="selectedRecordCopy!.Subject" class="form-control" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.Subject)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    Message
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <Editor ScriptSrc="./lib/tinymce/tinymce.min.js" @bind-Value="selectedRecordCopy!.Message" Field="() => selectedRecordCopy!.Message" LicenseKey="gpl" />
                                    @* <InputTextArea @bind-Value="selectedRecord!.Message" class="form-control" /> *@
                                    <ValidationMessage For="@(() => selectedRecord!.Message)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-2">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Vehicle</label>
                                </div>
                                <div class="col-md-10">
                                    <InputNumber @bind-Value="selectedRecordCopy!.VehicleID" class="form-control" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.VehicleID)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> <i class="fa-solid fa-sterling-sign"></i> Offered</label>
                                        </div>
                                        <div class="col-md-8">
                                            <InputNumber @bind-Value="selectedRecordCopy!.AmountOffered" class="form-control" />
                                            <ValidationMessage For="@(() => selectedRecordCopy!.AmountOffered)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Accepted?</label>
                                        </div>
                                        <div class="col-md-8">
                                            <div class="d-grid gap-2 d-md-block">
                                                <button type="button" class="btn @(selectedRecordCopy!.IsAccepted == true? "btn-primary" : "btn-outline-primary") me-md-3" @onclick="(e) => ToggleMainRecordIsAccepted()"><i class="@(selectedRecordCopy!.IsAccepted == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                            </div>
                                            <ValidationMessage For="@(() => selectedRecordCopy!.IsAccepted)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Sent Date</label>
                                        </div>
                                        <div class="col-md-8">
                                            <InputDate @bind-Value="selectedRecordCopy!.SentDate" class="form-control" />
                                            <ValidationMessage For="@(() => selectedRecordCopy!.SentDate)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> <i class="fa-solid fa-sterling-sign"></i> Status</label>
                                        </div>
                                        <div class="col-md-8">
                                            <InputSelect @bind-Value="selectedRecordCopy!.MessageStatusID" class="form-control">
                                                <option value="">-- Please Select --</option>
                                                @foreach (var value in Enum.GetValues<MessageStatus>())
                                                {
                                                    <option value="@value">@value</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => selectedRecordCopy!.MessageStatusID)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <ValidationSummary />

            </EditForm>
        </Body>
        <Footer>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(-1)"><i class="fa-solid fa-square-caret-left"></i></button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(1)"><i class="fa-solid fa-square-caret-right"></i></button>
            <button type="button" class="btn btn-info" data-bs-dismiss="modal" @onclick="() => SendMessage(true)"><i class="fa-solid fa-paper-plane"></i> Send</button>

            @if (selectedRecordChanges?.Count > 0)
            {
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(true)"><i class="fa-solid fa-floppy-disk"></i> Save and Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(false)"><i class="fa-solid fa-floppy-disk"></i> Save</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="CancelMainRecordConfirm"><i class="fa-solid fa-rotate-left"></i> Cancel <strong>@(selectedRecordChanges?.Count ?? 1)</strong> Changes</button>
            }
            else
            {
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseMainRecord"><i class="fa-solid fa-rotate-left"></i> Close</button>
            }
        </Footer>
    </Modal>
}

@code {
    public EditContext? EditContextMain { get; set; }
    private FluentValidationValidator? _fluentValidationValidator;

    public string? action { get; set; }
    public string? soundEffect { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    public string? loadDataErrorMsg = null;

    [Parameter]
    public int? MessageID { get; set; }

    private List<MessageModel>? mainRecords { get; set; }

    [SupplyParameterFromForm]
    public MessageModel? selectedRecord { get; set; } = new MessageModel();
    private MessageModel? selectedRecordCopy { get; set; } = new MessageModel();
    private IDictionary<string, string>? selectedRecordChanges = new Dictionary<string, string>();

    //Related datasets
    private List<MessageTemplateModel>? messageTemplates { get; set; }

    private Dictionary<string, object?> filterMainValues = new Dictionary<string, object?>();

    private IList<Func<MessageModel, bool>> filtersMain = new List<Func<MessageModel, bool>>();

    private IQueryable<MessageModel>? FilteredMainRecords =>
        mainRecords?.AsQueryable().Where(m => filtersMain.All(filter => filter(m)));

    public string? GetFilter(string? fieldName)
    {
        string? fieldValue = null;

        if (fieldName != null)
        {
            if (!filterMainValues.ContainsKey(fieldName))
                filterMainValues.Add(fieldName ?? "", null);
            else
                fieldValue = filterMainValues[fieldName ?? ""]?.ToString();
        }

        return fieldValue;
    }

    public bool? GetFilterBool(string? fieldName)
    {
        bool? fieldValue = null;
        fieldValue = bool.Parse(GetFilter(fieldName) ?? bool.FalseString);

        return fieldValue;
    }

    public DateTime? GetFilterDate(string? fieldName)
    {
        bool? IsDate = DateTime.TryParse(GetFilter(fieldName), out DateTime date);
        
        if (IsDate == true)
            return date;
        else
            return null;
    }

    private void AddFilterMain(Func<MessageModel, bool> filter)
    {
        filtersMain.Add(filter);
    }

    private void RemoveFilterMain(Func<MessageModel, bool> filter)
    {
        filtersMain.Remove(filter);
    }

    private void ChangeFilterMain(string fieldName, object? value)
    {
        if (value == null || string.IsNullOrEmpty(value.ToString()))
        {
            filterMainValues.Remove(fieldName);
        }
        else
        {
            var property = typeof(MessageModel).GetProperty(fieldName.Split('.').First());
            if (property != null)
            {
                var targetType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
                object? convertedValue = null;
                //Console.WriteLine($"Filter {fieldName} value {value} type {targetType}");

                if (targetType.IsEnum)
                {
                    try
                    {
                        convertedValue = Enum.Parse(targetType, value.ToString()!);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (fieldName == nameof(MessageModel.MessageTemplate) + "." + nameof(MessageTemplateModel.MessageTemplateID))
                {
                    try
                    {
                        //convertedValue = int.Parse(value.ToString()!);
                        convertedValue = Convert.ChangeType(value, typeof(MessageTemplateModel).GetProperties().FirstOrDefault()?.PropertyType ?? typeof(int));
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType == typeof(bool) || targetType == typeof(bool?))
                {
                    bool? oldValue = null;
                    bool? newValue = null;
                    
                    //Get old and new value to toggle and discard value sent from UI
                    if (filterMainValues.ContainsKey(fieldName))
                        oldValue = bool.Parse(filterMainValues[fieldName ?? ""]?.ToString() ?? bool.FalseString);

                    if (oldValue == true)
                    {
                        newValue = false;
                    }
                    else if (oldValue == false)
                    {
                        newValue = true;
                    }
                    else {
                        newValue = null;
                        
                    }

                    try
                    {
                        convertedValue = newValue;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else
                {
                    try
                    {
                        convertedValue = Convert.ChangeType(value, targetType);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }

                if (convertedValue != null)
                {
                    filterMainValues[fieldName] = convertedValue;
                    Console.WriteLine($"Filter {fieldName} set to {convertedValue}");
                }
            }
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filtersMain.Clear();

        foreach (var filter in filterMainValues)
        {
            var propertyName = filter.Key;
            var propertyValue = filter.Value;
            Console.WriteLine($"Filter {propertyName} value {propertyValue}");

            var parameter = Expression.Parameter(typeof(MessageModel), "m");
            Expression property = parameter;
            Expression? parentProperty = null;

            foreach (var member in propertyName.Split('.'))
            {
                parentProperty = property;
                property = Expression.Property(property, member);
            }

            var constant = Expression.Constant(propertyValue);

            Expression? comparison = null;

            if (propertyValue is string)
            {
                var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string), typeof(StringComparison) });
                comparison = Expression.Call(property, containsMethod!, constant, Expression.Constant(StringComparison.CurrentCultureIgnoreCase));
            }
            else if (propertyValue is int || propertyValue is decimal || propertyValue is bool || propertyValue.GetType().IsEnum)
            {
                if (Nullable.GetUnderlyingType(property.Type) != null)
                {
                    var hasValue = Expression.Property(property, "HasValue");
                    var value = Expression.Property(property, "Value");
                    var equal = Expression.Equal(value, constant);
                    comparison = Expression.AndAlso(hasValue, equal);
                }
                else
                {
                    comparison = Expression.Equal(property, constant);
                }
            }
            else if (propertyValue is DateTime)
            {
                if (Nullable.GetUnderlyingType(property.Type) != null)
                {
                    var hasValue = Expression.Property(property, "HasValue");
                    var value = Expression.Property(property, "Value");
                    var equal = Expression.Equal(value, constant);
                    comparison = Expression.AndAlso(hasValue, equal);
                }
                else
                {
                    comparison = Expression.Equal(property, constant);
                }
            }

            if (parentProperty != null)
            {
                var parentNotNull = Expression.NotEqual(parentProperty, Expression.Constant(null));
                comparison = Expression.AndAlso(parentNotNull, comparison);
            }

            if (comparison != null)
            {
                var lambda = Expression.Lambda<Func<MessageModel, bool>>(comparison, parameter);
                Console.WriteLine(lambda);
                filtersMain.Add(lambda.Compile());
            }
        }

        // Trigger UI update
        StateHasChanged();
    }

    private void RemoveFilters()
    {
        filterMainValues.Clear();
        filtersMain.Clear();

        // Trigger UI update
        StateHasChanged();
    }

    // private IQueryable<MessageModel>? FilteredMainRecords =>
    //     (mainRecords)?.AsQueryable()
    //     .Where(
    //         m => 
    //         (FilterMainMessageID == null ? true : m.MessageID == (FilterMainMessageID ?? m.MessageID))
    //         && (FilterMainMessageGUID == null ? true : (m.MessageGUID.ToString() ?? string.Empty).Contains(FilterMainMessageGUID, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainMessageType == null ? true : m.MessageTypeID == (FilterMainMessageType ?? m.MessageTypeID))
    //         && (FilterMainMessageTemplateID == null ? true : (m.MessageTemplate ?? new MessageTemplateModel()).MessageTemplateID == FilterMainMessageTemplateID)
    //         && (FilterMainSubject == null ? true : (m.Subject ?? string.Empty).Contains(FilterMainSubject, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainMessage == null ? true : (m.Message ?? string.Empty).Contains(FilterMainMessage, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainMessageIsHTML == null ? true : m.MessageIsHTML == FilterMainMessageIsHTML)
    //         && (FilterMainVehicleID == null ? true : m.VehicleID == FilterMainVehicleID)
    //         && (FilterMainAmountOffered == null ? true : m.AmountOffered == FilterMainAmountOffered)
    //         && (FilterMainIsAccepted == null ? true : m.IsAccepted == FilterMainIsAccepted)
    //         && (FilterMainFrom == null ? true : (m.From ?? string.Empty).Contains(FilterMainFrom, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainFromName == null ? true : (m.FromName ?? string.Empty).Contains(FilterMainFromName, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainTo == null ? true : (m.To ?? string.Empty).Contains(FilterMainTo, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainToName == null ? true : (m.ToName ?? string.Empty).Contains(FilterMainToName, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainCC == null ? true : (m.CC ?? string.Empty).Contains(FilterMainCC, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainBCC == null ? true : (m.BCC ?? string.Empty).Contains(FilterMainBCC, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainIsSent == null ? true : m.IsSent == FilterMainIsSent)
    //         && (FilterMainSentDate == null ? true : DateOnly.FromDateTime(m.SentDate ?? DateTime.MinValue) == DateOnly.FromDateTime((DateTime)(FilterMainSentDate ?? m.SentDate)!))
    //         && (FilterMainMessageStatus == null ? true : (m.MessageStatusID.GetEnumDisplayName() ?? string.Empty).Contains(FilterMainMessageStatus, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainCreatedBy == null ? true : (m.CreatedBy ?? string.Empty).Contains(FilterMainCreatedBy, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainCreatedDate == null ? true : DateOnly.FromDateTime(m.CreatedDate ?? DateTime.MinValue) == DateOnly.FromDateTime((DateTime)(FilterMainCreatedDate ?? m.CreatedDate)!))
    //         && (FilterMainLastUpdatedBy == null ? true : (m.LastUpdatedBy ?? string.Empty).Contains(FilterMainLastUpdatedBy, StringComparison.CurrentCultureIgnoreCase))
    //         && (FilterMainLastUpdatedDate == null ? true : DateOnly.FromDateTime(m.LastUpdatedDate ?? DateTime.MinValue) == DateOnly.FromDateTime((DateTime)(FilterMainLastUpdatedDate ?? m.LastUpdatedDate)!))
    //     );

    List<string> FiltersMain = new List<string>();
    int? FilterMainMessageID;
    string? FilterMainMessageGUID;
    MessageType? FilterMainMessageType;
    int? FilterMainMessageTemplateID;
    string? FilterMainSubject;
    string? FilterMainMessage;
    bool? FilterMainMessageIsHTML;
    int? FilterMainVehicleID;
    decimal? FilterMainAmountOffered;
    bool? FilterMainIsAccepted;
    string? FilterMainFrom;
    string? FilterMainFromName;
    string? FilterMainTo;
    string? FilterMainToName;
    string? FilterMainCC;
    string? FilterMainBCC;
    bool? FilterMainIsSent;
    DateTime? FilterMainSentDate;
    string? FilterMainMessageStatus;
    string? FilterMainCreatedBy;
    DateTime? FilterMainCreatedDate;
    string? FilterMainLastUpdatedBy;
    DateTime? FilterMainLastUpdatedDate;

    private string? messageEndPoint;
    private string? messageTemplateEndPoint;

    private Modal? modalMessage { get; set; }

    protected override async Task OnInitializedAsync() 
    {
        SetEditorContextMain();

        bool? isError = false;
        messageEndPoint = $"{configuration["APIEndpoint"]}/Message";
        messageTemplateEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate";

        try
        {
            mainRecords = await Http.GetFromJsonAsync<List<MessageModel>>(messageEndPoint);
        }
        catch (HttpRequestException ex)
        {
            isError = true;
            HandleJsonException(ex, "Message", MessageID.ToString() ?? "");
        }

        if (isError != true) {
            //Load other objects

            try
            {
                messageTemplates = await Http.GetFromJsonAsync<List<MessageTemplateModel>>(messageTemplateEndPoint);
            }
            catch (HttpRequestException ex)
            {
                isError = true;
                HandleJsonException(ex, "MessageTemplate", MessageID.ToString() ?? "");
            }
        }
    }

    public void SetEditorContextMain()
    {
        //When Edit Form is based on an Edit Context this must be called each time the context changes for validation to work
        if (selectedRecordCopy != null)
            EditContextMain = new EditContext(selectedRecordCopy);

        if (EditContextMain != null)
        {
            EditContextMain.OnFieldChanged += ChangeMainRecord;
        }
    }

    public string TableCSS(MessageModel? context)
    {
        string css = "";
        if (context?.MessageID == selectedRecord?.MessageID)
        {
            css = "SelectedRow";
        }
        else if (context?.IsSent != true)
        {
            css = "ErrorRow";
        }

        return css;
    }

    private void FilterMainRefresh()
    {
        FiltersMain.Clear();

        if (FilterMainMessageID != null)
        {
            FiltersMain.Add($"ID: '{FilterMainMessageID.ToString()}'");
        }
        if (FilterMainMessageGUID != null)
        {
            FiltersMain.Add($"GUID: '{FilterMainMessageGUID}'");
        }
        if (FilterMainMessageType != null)
        {
            FiltersMain.Add($"Type: '{FilterMainMessageType}'");
        }
        if (FilterMainMessageTemplateID != null)
        {
            FiltersMain.Add($"Template: '{FilterMainMessageTemplateID}'");
        }
        if (FilterMainSubject != null)
        {
            FiltersMain.Add($"Subject: '{FilterMainSubject}'");
        }
        if (FilterMainMessage != null)
        {
            FiltersMain.Add($"Message: '{FilterMainMessage}'");
        }
        if (FilterMainMessageIsHTML != null)
        {
            FiltersMain.Add($"Is HTML: '{((bool)(FilterMainMessageIsHTML = true) ? "Y" : "N")}'");
        }
        if (FilterMainVehicleID != null)
        {
            FiltersMain.Add($"Vehicle ID: '{FilterMainVehicleID.ToString()}'");
        }
        if (FilterMainAmountOffered != null)
        {
            FiltersMain.Add($"Amount Offered: '{FilterMainAmountOffered.ToString()}'");
        }
        if (FilterMainIsAccepted != null)
        {
            FiltersMain.Add($"Is Accepted: '{((bool)(FilterMainIsAccepted = true) ? "Y" : "N")}'");
        }
        if (FilterMainFrom != null)
        {
            FiltersMain.Add($"From (Email): '{FilterMainFrom}'");
        }
        if (FilterMainFromName != null)
        {
            FiltersMain.Add($"From (Name): '{FilterMainFromName}'");
        }
        if (FilterMainTo != null)
        {
            FiltersMain.Add($"To (Email): '{FilterMainTo}'");
        }
        if (FilterMainToName != null)
        {
            FiltersMain.Add($"To (Name): '{FilterMainToName}'");
        }
        if (FilterMainCC != null)
        {
            FiltersMain.Add($"To (CC): '{FilterMainCC}'");
        }
        if (FilterMainBCC != null)
        {
            FiltersMain.Add($"To (BCC): '{FilterMainBCC}'");
        }
        if (FilterMainIsSent != null)
        {
            FiltersMain.Add($"Is Sent: '{((bool)(FilterMainIsSent = true) ? "Y" : "N")}'");
        }
        if (FilterMainSentDate != null)
        {
            FiltersMain.Add($"Sent Date: '{FilterMainSentDate.Value.ToString("dd/MM/yyyy")}'");
        }
        if (FilterMainMessageStatus != null)
        {
            FiltersMain.Add($"Status: '{FilterMainMessageStatus}'");
        }
        if (FilterMainCreatedBy != null)
        {
            FiltersMain.Add($"Created By: '{FilterMainCreatedBy}'");
        }
        if (FilterMainCreatedDate != null)
        {
            FiltersMain.Add($"Created Date: '{FilterMainCreatedDate.Value.ToString("dd/MM/yyyy")}'");
        }
        if (FilterMainLastUpdatedBy != null)
        {
            FiltersMain.Add($"Last Updated By: '{FilterMainLastUpdatedBy}'");
        }
        if (FilterMainLastUpdatedDate != null)
        {
            FiltersMain.Add($"Last Updated Date: '{FilterMainLastUpdatedDate.Value.ToString("dd/MM/yyyy")}'");
        }
    }

    private void FilterMainClear()
    {
        FilterMainMessageID = null;
        FilterMainMessageGUID = null;
        FilterMainMessageType = null;
        FilterMainMessageTemplateID = null;
        FilterMainSubject = null;
        FilterMainMessage = null;
        FilterMainMessageIsHTML = null;
        FilterMainVehicleID = null;
        FilterMainAmountOffered = null;
        FilterMainIsAccepted = null;
        FilterMainFrom = null;
        FilterMainFromName = null;
        FilterMainTo = null;
        FilterMainToName = null;
        FilterMainCC = null;
        FilterMainBCC = null;
        FilterMainIsSent = null;
        FilterMainSentDate = null;
        FilterMainMessageStatus = null;
        FilterMainCreatedBy = null;
        FilterMainCreatedDate = null;
        FilterMainLastUpdatedBy = null;
        FilterMainLastUpdatedDate = null;

        FiltersMain.Clear();
    }

    public void ToggleFilterMainMessageIsHTML()
    {
        if (FilterMainMessageIsHTML == null)
        {
            FilterMainMessageIsHTML = true;
        }
        else if (FilterMainMessageIsHTML == true)
        {
            FilterMainMessageIsHTML = false;
        }
        else if (FilterMainMessageIsHTML == false)
        {
            FilterMainMessageIsHTML = null;
        }

        FilterMainRefresh();
    }

    public void ToggleFilterMainIsAccepted()
    {
        if (FilterMainIsAccepted == null)
        {
            FilterMainIsAccepted = true;
        }
        else if (FilterMainIsAccepted == true)
        {
            FilterMainIsAccepted = false;
        }
        else if (FilterMainIsAccepted == false)
        {
            FilterMainIsAccepted = null;
        }

        FilterMainRefresh();
    }

    public void ToggleFilterMainIsSent()
    {
        if (FilterMainIsSent == null)
        {
            FilterMainIsSent = true;
        }
        else if (FilterMainIsSent == true)
        {
            FilterMainIsSent = false;
        }
        else if (FilterMainIsSent == false)
        {
            FilterMainIsSent = null;
        }

        FilterMainRefresh();
    }

    private async Task FormAction()
    {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm")
        {
            ClearForm();
        }
        else if (action == "CancelMainRecordConfirm")
        {
            CancelMainRecord();
        }
        else if (action == "DeleteMainRecordConfirm")
        {
            await DeleteMainRecord();
        }  
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm()
    {
        action = "ClearFormConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearForm()
    {
        action = "ClearForm";

        selectedRecord = new MessageModel();

        modalConfirm!.Close();
    }

    private MessageModel? GetMainRecord(int recordID)
    {
        return 
        mainRecords?
        .Where(t => t.MessageID == recordID)
        .FirstOrDefault();
    }

    private void SelectMainRecord(int? recordID)
    {
        if (recordID != null && recordID > 0)
        {
            selectedRecord = GetMainRecord(recordID ?? 0);
        }
        else
        {
            selectedRecord = new MessageModel();
            MessageTemplateModel blankMessageTemplateModel = new MessageTemplateModel();
            selectedRecord.MessageTemplate = blankMessageTemplateModel;
        }

        //Keep a copy of this object to be used for edit form so original object can remain untouched until save operation (otherwise it changes on screen)
        if (selectedRecord != null)
            selectedRecordCopy = selectedRecord?.Clone();
    }

    public async Task AdvanceToMainRecord(int numRecords)
    {
        if (await SaveMainRecord(false) == true)
        {
            int? currentRecordID = selectedRecord?.MessageID;
            MessageModel? nextRecord = new MessageModel();

            if (numRecords > 0)
            {
                nextRecord =
                FilteredMainRecords?
                .SkipWhile(obj => obj.MessageID != currentRecordID)
                .Skip(numRecords)
                .FirstOrDefault();
            }
            else if (numRecords < 0)
            {
                int numRecordsBack = Math.Abs(numRecords);
                nextRecord =
                    FilteredMainRecords?
                    .Reverse()
                    .SkipWhile(obj => obj.MessageID != currentRecordID)
                    .Skip(numRecordsBack)
                    .FirstOrDefault();
            }

            if (nextRecord != null)
            {
                if (nextRecord?.MessageID != null)
                {
                    selectedRecord = nextRecord;
                    selectedRecordCopy = nextRecord;
                }
            }
        }
    }

    public void ToggleMainRecordIsAccepted()
    {
        if (selectedRecordCopy != null)
        {
            if (selectedRecordCopy.IsAccepted == true)
            {
                selectedRecordCopy.IsAccepted = false;
            }
            else
            {
                selectedRecordCopy.IsAccepted = true;
            }
        }
    }

    protected void ChangeMainRecord(object? sender, FieldChangedEventArgs? e)
    {
        string? fieldName = e?.FieldIdentifier.FieldName;
        string? fieldValue = e?.FieldIdentifier.Model.GetType().GetProperty(fieldName ?? "")?.GetValue(e?.FieldIdentifier.Model)?.ToString();

        fieldValue = StringFunctions.FormatFieldChangedValue(fieldValue);

        if (selectedRecordChanges != null && fieldName != null)
        {
            if (selectedRecordChanges.ContainsKey(fieldName))
            {
                selectedRecordChanges[fieldName] = fieldValue ?? "";
            }
            else
            {
                selectedRecordChanges.Add(fieldName, fieldValue ?? "");
            }
        }
    }

    private void EditMainRecord(int? messageID)
    {
        SelectMainRecord(messageID);

        SetEditorContextMain();

        if (selectedRecordCopy != null)
        {
            modalMessage!.MakeLarge();
            modalMessage!.Open();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Message {messageID}";
            msgError = (MarkupString)$"Unfortunately the message could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task<bool> SaveMainRecord(bool? CloseDialogAfterSave)
    {
        string? saveEndPoint;
        bool returnValue = false;

        if (await _fluentValidationValidator!.ValidateAsync())
        {
            Logger.LogInformation("Id = {Id}", selectedRecordCopy?.MessageID);

            try
            {
                if (selectedRecord != null && selectedRecordCopy != null)
                {
                    //Update related entities (as only IDs are updated on the form so rest of object is not updated)
                    selectedRecordCopy.MessageTemplate = GetMessageTemplate(selectedRecordCopy.MessageTemplate?.MessageTemplateID ?? 0);
                    
                    HttpResponseMessage formResponse = new HttpResponseMessage();

                    if (selectedRecordCopy?.MessageID > 0) {
                        //Update existing record
                        saveEndPoint = $"{configuration["APIEndpoint"]}/Message/{selectedRecord?.MessageID}";
                        formResponse = await Http.PutAsJsonAsync<MessageModel>(saveEndPoint, selectedRecordCopy!);
                    }
                    else 
                    {
                        //Insert new record
                        saveEndPoint = $"{configuration["APIEndpoint"]}/Message";
                        formResponse = await Http.PostAsJsonAsync<MessageModel>(saveEndPoint, selectedRecordCopy!);
                    }

                    if (formResponse.IsSuccessStatusCode != true)
                    {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Save Message Record";
                        msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                    else
                    {
                        //Copy properties back to tracked object being saved
                        selectedRecordCopy.CopyProperties(selectedRecord);

                        selectedRecordChanges?.Clear();

                        soundEffect = SoundFunctions.GetConfirmSound();
                        returnValue = true;

                        if (selectedRecordCopy?.MessageID > 0)
                        {
                            //Update existing record
                            if (CloseDialogAfterSave == true)
                            {
                                CloseMainRecord();
                            }
                        }
                        else 
                        {
                            //Insert new record

                            //Get ID of newly inserted record and add new item to model so shows on screen
                            MessageModel insertedMessage = await formResponse.Content.ReadFromJsonAsync<MessageModel>() ?? new MessageModel();

                            if (insertedMessage.MessageID > 0)
                            {
                                mainRecords?.Add(insertedMessage);

                                if (CloseDialogAfterSave == true)
                                {
                                    CloseMainRecord();
                                }
                            }
                            else
                            {
                                action = "Error";
                                soundEffect = SoundFunctions.GetErrorSound();

                                msgErrorTitle = $"Cannot Save Message Record";
                                msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                                msgErrorStackTrace = null;

                                modalError!.Open();
                            }
                        }
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"Cannot Save Message Record";
                    msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }

            }
            catch (HttpRequestException ex)
            {
                HandleJsonException(ex, "Message", selectedRecordCopy?.MessageID.ToString() ?? "0");
            }
        }

        return returnValue;
    }

    private void DeleteMainRecordConfirm()
    {
        if (selectedRecord?.MessageID > 0)
        {
            action = "DeleteMainRecordConfirm";
            soundEffect = SoundFunctions.GetPromptSound();

            msgConfirmTitle = $"Confirm Delete?";
            msgConfirm = (MarkupString)$"Are you sure you want to delete the message with the Subject \"{selectedRecord.Subject}\" sent to {selectedRecord.To}?";

            modalConfirm!.OpenOnTop1();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"No Message Selected";
            msgError = (MarkupString)$"Please select a message first before pressing the Delete button or if try to select one again if one had been selected.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task DeleteMainRecord()
    {
        action = "DeleteMainRecord";

        string? deleteEndPoint;

        Logger.LogInformation("Id = {Id}", selectedRecord?.MessageID);

        modalConfirm!.Close();

        try
        {
            if (selectedRecord != null)
            {
                MessageModel formResponse = new MessageModel();

                if (selectedRecord?.MessageID > 0)
                {
                    deleteEndPoint = $"{configuration["APIEndpoint"]}/Message/{selectedRecord?.MessageID}";
                    formResponse = await Http.DeleteFromJsonAsync<MessageModel>(deleteEndPoint) ?? new MessageModel();

                    if (formResponse.MessageID > 0)
                    {
                        //Remove record from screen as well
                        mainRecords?.Remove(selectedRecord!);
                    }
                    else
                    {
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Delete Message Record";
                        msgError = (MarkupString)$"Unfortunately the Message Record could not be deleted successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = null;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"No Message Selected";
                    msgError = (MarkupString)$"Please select a message first before pressing the Delete button or if try to select one again if one had been selected.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }
            }
            else
            {
                action = "Error";
                soundEffect = SoundFunctions.GetErrorSound();

                msgErrorTitle = $"Cannot Save Message Record";
                msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "Message", selectedRecord?.MessageID.ToString() ?? "0");
        }
    }

    private void CancelMainRecordConfirm()
    {
        action = "CancelMainRecordConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        string? numberOfChanges = $"{selectedRecordChanges?.Count} {(selectedRecordChanges?.Count == 1 ? "Change" : "Changes")}";
        string? listOfChanges = selectedRecordChanges?.Select(x => $"<li>{x.Key}: {x.Value}</li>").Aggregate((x, y) => $"{x}{y}"); //Aggregation in case of duplication

        msgConfirmTitle = $"Confirm Cancel?";
        msgConfirm = (MarkupString)$@"
            <p>
                You have made the following changes:<br />
                - Message: {numberOfChanges}:
                <ul>
                {listOfChanges}
                </ul>
            </p>
            <p>
                Are you sure you want to cancel and lose these changes?
            </p>";

        modalConfirm!.OpenOnTop1();
    }

    private void CancelMainRecord()
    {
        //selectedRecord = selectedRecordCopy;

        //Set object back to original values
        if (selectedRecord != null)
        {
            //selectedRecord.Subject = selectedRecordCopy?.Subject;
        }

        // if (selectedRecord != null && selectedRecordCopy != null)
        //     selectedRecordCopy.CopyProperties(selectedRecord);

        //Better way?
        // PropertyInfo[]? properties = selectedRecordCopy?.GetType().GetProperties();
        // if (properties != null)
        // {
        //     foreach (PropertyInfo property in properties)
        //     {
        //         // Get the name and value of each property
        //         string? propertyName = property.Name;
        //         object? propertyValue = property.GetValue(selectedRecord);

        //         //Console.WriteLine($"{propertyName}: {propertyValue}");
        //         selectedRecord?.GetType().GetProperty(propertyName)?.SetValue(selectedRecord, propertyValue);
        //         //selectedRecord?.GetType().GetProperty(propertyName)?.SetValue(selectedRecordCopy, selectedRecordCopy?.GetType().GetProperty(propertyName)?.GetValue(selectedRecordCopy));
        //     }
        // }

        CloseMainRecord();
    }

    private void CloseMainRecord()
    {
        modalMessage!.Close();
        modalConfirm!.Close();

        selectedRecordChanges?.Clear();
    }

    private void HandleJsonException(HttpRequestException ex, string objectName, string objectID)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";

            //Redirect to login screen
            NavManager.NavigateTo($"Login/Vehicles");
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" is not found";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" resulted in an invalid request";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }

    //Additional Functions
    private MessageTemplateModel? GetMessageTemplate(int messageTemplateID)
    {
        return
        messageTemplates?
        .Where(t => t.MessageTemplateID == messageTemplateID)
        .FirstOrDefault();
    }

    public async Task SendMessage(bool? CloseDialogAfterSave)
    {
        if (await SaveMainRecord(CloseDialogAfterSave) == true)
        {
            //Send email
        }
    }
}
