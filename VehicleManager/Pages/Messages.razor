@page "/Messages"
@page "/Messages/{MessageID}"

@using VehicleManager.Models
@using VehicleManager.Services
@using VehicleManager.Shared
@using VehicleManager.Components
@using System.Net
@using Microsoft.AspNetCore.Components.QuickGrid
@using TinyMCE.Blazor
@using System.Globalization
@using System.Reflection
@using System.Linq.Expressions

@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<MessageModel> Logger
@inject AppData appData
@inject IJSRuntime JSRuntime

<PageTitle>Messages @@ Broken Motor</PageTitle>

<audio src="@soundEffect" autoplay></audio>

<Modal @ref="modalInfo">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        @msgInfo
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalInfo!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalError!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null)
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalConfirm!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<Modal @ref="modalMainRecord">
    <WindowControls>
        @if (selectedRecordChanges?.Count > 0)
        {
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelMainRecordConfirm"></button>
        }
        else
        {
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalMainRecord!.Close()"></button>
        }
    </WindowControls>
    <Title>
        @if (@selectedRecordCopy?.MessageID > 0)
        {
            @:<i class="fa-solid fa-envelope-open"></i> Message @selectedRecordCopy?.MessageID
        }
        else
        {
            @:<i class="fa-solid fa-envelope-open"></i> New Message
        }
    </Title>
    <Body>
        <EditForm EditContext="@EditContextMain" OnValidSubmit="() => SaveMainRecord(true)">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <div class="bd-callout bd-callout-VM bd-callout-grey GreyBackground">
                <div class="container">

                    @if (selectedRecordCopy == null)
                    {
                        <div class="row">
                            <div class="col-md">
                                <div class="alert alert-primary text-center" role="alert">
                                    <h1>
                                        <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                                    </h1>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {

                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> From</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputText @bind-Value="selectedRecordCopy!.FromName" class="form-control" placeholder="Name" />
                                        <ValidationMessage For="@(() => selectedRecordCopy!.FromName)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <InputText @bind-Value="selectedRecordCopy!.From" class="form-control" placeholder="Email" />
                                <ValidationMessage For="@(() => selectedRecordCopy!.From)" />
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> To</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputText @bind-Value="selectedRecordCopy!.ToName" class="form-control" placeholder="Name" />
                                        <ValidationMessage For="@(() => selectedRecordCopy!.ToName)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <InputText @bind-Value="selectedRecordCopy!.To" class="form-control" placeholder="Email" />
                                <ValidationMessage For="@(() => selectedRecordCopy!.To)" />
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-2">
                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Template</label>
                            </div>
                            <div class="col-md-10">
                                @if (selectedRecordCopy!.MessageTemplate == null)
                                {
                                    selectedRecordCopy!.MessageTemplate = new MessageTemplateModel();
                                }
                                <InputSelect @bind-Value="selectedRecordCopy!.MessageTemplate!.MessageTemplateID" class="form-select" @bind-Value:after="() => LoadMessageTemplate(true)">
                                    <option value="">-- Please Select --</option>
                                    @if (messageTemplates != null)
                                    {
                                        foreach (var template in messageTemplates)
                                        {
                                            <option value="@template.MessageTemplateID">@template.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => selectedRecordCopy!.MessageTemplate.MessageTemplateID)" />

                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-2">
                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Vehicle</label>
                            </div>
                            <div class="col-md-10">
                                <InputNumber @bind-Value="selectedRecordCopy!.VehicleID" class="form-control" />
                                <ValidationMessage For="@(() => selectedRecordCopy!.VehicleID)" />
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> <i class="fa-solid fa-sterling-sign"></i> Offered</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputNumber @bind-Value="selectedRecordCopy!.AmountOffered" class="form-control" />
                                        <ValidationMessage For="@(() => selectedRecordCopy!.AmountOffered)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Accepted?</label>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="d-grid gap-2 d-md-block">
                                            <button type="button" class="btn @(selectedRecordCopy!.IsAccepted == true? "btn-primary" : "btn-outline-primary") me-md-3" @onclick="(e) => ToggleMainRecordIsAccepted()"><i class="@(selectedRecordCopy!.IsAccepted == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                        </div>
                                        <ValidationMessage For="@(() => selectedRecordCopy!.IsAccepted)" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Sent Date</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputDate @bind-Value="selectedRecordCopy!.SentDate" class="form-control" />
                                        <ValidationMessage For="@(() => selectedRecordCopy!.SentDate)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> <i class="fa-solid fa-sterling-sign"></i> Status</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputSelect @bind-Value="selectedRecordCopy!.MessageStatusID" class="form-control">
                                            <option value="">-- Please Select --</option>
                                            @foreach (var value in Enum.GetValues<MessageStatus>())
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => selectedRecordCopy!.MessageStatusID)" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Add Database Field</label>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md">
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="fa-solid fa-database"></i></span>
                                                    <InputSelect @bind-Value="selectedDatabaseField" class="form-select">
                                                        <option value="">-- Please Select --</option>
                                                        
                                                        @if (messageFields != null)
                                                        {
                                                            foreach (var property in messageFields.GetType().GetProperties().OrderBy(p => p.Name))
                                                            {
                                                                string? optionValue = $"<data:Message.{property.Name}>";
                                                                <option value="@optionValue">@optionValue</option>
                                                            }
                                                        }
                                                        
                                                    </InputSelect>
                                                    <button class="btn btn-outline-primary" type="button" @onclick="InsertDatabaseField"><i class="fa-solid fa-square-plus"></i> Add Selected Field</button>
                                                    <button class="btn btn-outline-primary" type="button" @onclick="InsertDatabaseFieldFromFormat"><i class="fa-solid fa-palette"></i> Add With Format...</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-2">
                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Subject</label>
                            </div>
                            <div class="col-md-10">
                                <InputText id="subjectInput" @bind-Value="selectedRecordCopy!.Subject" class="form-control" onblur="@{
                                () => @SetFocus("Subject")
}" />
                                <ValidationMessage For="@(() => selectedRecordCopy!.Subject)" />
                            </div>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                Message
                            </div>
                        </div>
                        <div class="row g-3 mb-3">
                            <div class="col-md">
                                <Editor ScriptSrc="./lib/tinymce/tinymce.min.js" @bind-Value="selectedRecordCopy!.Message" Field="() => selectedRecordCopy!.Message" LicenseKey="gpl" />
                                @* <InputTextArea @bind-Value="selectedRecordCopy!.Message" class="form-control" /> *@
                                <ValidationMessage For="@(() => selectedRecordCopy!.Message)" />
                            </div>
                        </div>

                        if (messagePreview != null)
                        {
                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    Message Preview
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <div class="Textarea">
                                        @messagePreview
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <ValidationSummary />

        </EditForm>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(-1)"><i class="fa-solid fa-square-caret-left"></i></button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(1)"><i class="fa-solid fa-square-caret-right"></i></button>
        <button type="button" class="btn btn-info" data-bs-dismiss="modal" @onclick="() => PreviewMessage()"><i class="fa-solid fa-magnifying-glass"></i> Preview</button>
        <button type="button" class="btn btn-info" data-bs-dismiss="modal" @onclick="() => SendMessage(true)" disabled="@(selectedRecordCopy?.MessageProcessed == null ? true : false)"><i class="fa-solid fa-paper-plane"></i> Send</button>

        @if (selectedRecordChanges?.Count > 0)
        {
            <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(true)"><i class="fa-solid fa-floppy-disk"></i> Save and Close</button>
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(false)"><i class="fa-solid fa-floppy-disk"></i> Save</button>
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="CancelMainRecordConfirm"><i class="fa-solid fa-rotate-left"></i> Cancel <strong>@(selectedRecordChanges?.Count ?? 1)</strong> Changes</button>
        }
        else
        {
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseMainRecord"><i class="fa-solid fa-rotate-left"></i> Close</button>
        }
    </Footer>
</Modal>

<Modal @ref="modalFormat">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalFormat!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-palette"></i> Formatting Options for @selectedDatabaseField</Title>
    <Body>
        @{
            Type? propertyType = ModelFunctions.GetPropertyTypeFromModelAndNameDataTag(selectedDatabaseField);
        }
        <div class="bd-callout bd-callout-primary bd-callout-grey GreyBackground">
            <div class="container">
                <div class="row g-3 mb-3">
                    <div class="col-md">
                        <div class="row">
                            <div class="col-md">
                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Add With Format</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa-solid fa-palette"></i></span>
                                    <InputSelect @bind-Value="selectedDatabaseFieldFormatted" class="form-select">
                                        <option value="">-- Please Select --</option>
                                        <option value="@selectedDatabaseField">No Format</option>

                                        @if (propertyType == typeof(DateTime) || propertyType == typeof(DateTime?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd/MM/yyyy>")">Short Date (dd/MM/yyyy)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd/MM/yyyy HH:mm>")">Short Date and Time (dd/MM/yyyy HH:mm)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd/MM/yyyy HH:mm:ss>")">Short Date and Time with Seconds (dd/MM/yyyy HH:mm:ss)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd MMMM yyyy>")">Long Date (dd MMMM yyyy)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd MMMM yyyy HH:mm>")">Long Date and Time (dd MMMM yyyy HH:mm)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd MMMM yyyy HH:mm:ss>")">Long Date and Time with Seconds (dd MMMM yyyy HH:mm:ss)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:HH:mm>")">Time (HH:mm)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:HH:mm:ss>")">Time with Seconds (HH:mm:ss)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:d>")">Day of Month (d)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dddd>")">Day of Week (dddd)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:ddd>")">Day of Week Short (ddd)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:MMMM>")">Month of Year (MMMM)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:yyyy>")">Year (yyyy)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:yyyy-MM-dd>")">Year, Month, Day (yyyy-MM-dd)</option>
                                        }
                                        else if (propertyType == typeof(int) || propertyType == typeof(int?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N0>")">1,000</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:C0>")">&pound;0</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P0>")">0.%</option>
                                        }
                                        else if (propertyType == typeof(decimal) || propertyType == typeof(decimal?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N0>")">1,000</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N1>")">1,000.0</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N2>")">1,000.00</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:C0>")">&pound;0</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:C2>")">&pound;0.00</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P0>")">0.%</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P1>")">0.0%</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P2>")">0.00%</option>
                                        }
                                        else if (propertyType == typeof(bool) || propertyType == typeof(bool?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:True/False>")">True/False</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:Y/N>")">Y/N</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:Yes/No>")">Yes/No</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:1/0>")">1/0</option>
                                        }
                                        
                                    </InputSelect>
                                    <button class="btn btn-outline-primary" type="button" @onclick="InsertDatabaseFieldWithFormat"><i class="fa-solid fa-square-plus"></i> Add Selected Field</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalFormat!.Close()">Close</button>
    </Footer>
</Modal>

@if (HideContent != true)
{
    <h3><i class="fa-solid fa-envelopes-bulk"></i> Messages</h3>

    @if (loadDataErrorMsg != null) 
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-danger hstack gap-3" role="alert">
                        <div>
                            <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                        </div>
                        <div>
                            <p>
                                @loadDataErrorMsg
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (mainRecords == null)
    {
        <div class="container">
            <div class="row">
                <div class="col-md">
                    <div class="alert alert-primary text-center" role="alert">
                        <h1>
                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                        </h1>
                    </div>
                </div>
            </div>
        </div>
    }
    else {
        <div class="container-fluid">
            @{
                IList<string> ExcludeMainFields = new List<string> { "Message", "MessageProcessed", "MessageIsHTML", "CC", "BCC" };
                string? DisabledItemFieldName = null;
                string? ErrorItemFieldName = "IsSent";
            }
            <Grid Items="ItemsMain"
            ExcludeFields="ExcludeMainFields"
            FilterFields="FilterFieldsMain"
            DisabledItemFieldName="@DisabledItemFieldName"
            ErrorItemFieldName="@ErrorItemFieldName"
            DropDownValues="DropDownValues"
            SelectedItemID="selectedRecord?.MessageID" 
            OnSelectItem="SelectMainRecord" 
            OnEditItem="EditMainRecord" 
            OnDeleteItem="DeleteMainRecordConfirm"
            OnRemoveFilters="RemoveFiltersMain"
            OnRemoveLastFilter="RemoveLastFilterMain"
            OnRemoveFilter="RemoveFilterMain"
            OnShowFilterHelp="ShowFilterHelpMain"
            OnChangeFilter="ChangeFilterMainFromComponent"/>

        </div>
    }
}

@code {
    [Parameter]
    public int? MessageID { get; set; }

    [Parameter]
    public bool? HideContent { get; set; }

    public EditContext? EditContextMain { get; set; }
    public FluentValidationValidator? _fluentValidationValidator;

    private string? messageEndPoint;
    private string? messageTemplateEndPoint;

    private IList<Func<MessageModel, bool>> filtersMain = new List<Func<MessageModel, bool>>();

    private IQueryable<MessageModel>? ItemsMain =>
        mainRecords?.AsQueryable().Where(m => filtersMain.All(filter => filter(m)));

    private void AddFilterMain(Func<MessageModel, bool> filter)
    {
        filtersMain.Add(filter);
    }

    private void RemoveFilterMain(Func<MessageModel, bool> filter)
    {
        filtersMain.Remove(filter);
    }

    [Parameter]
    public List<MessageModel>? mainRecords { get; set; }

    [Parameter]
    public MessageModel? selectedRecord { get; set; } = new MessageModel();
    [Parameter]
    public MessageModel? selectedRecordCopy { get; set; } = new MessageModel();

    private CustomerModel? customerFields = new CustomerModel();
    private MessageModel? messageFields = new MessageModel();
    private VehicleModel? vehicleFields = new VehicleModel();

    private string? selectedDatabaseField { get; set; }
    private string? selectedDatabaseFieldFormatted { get; set; }
    private MarkupString? messagePreview { get; set; }

    //Related datasets
    private List<MessageTemplateModel>? messageTemplates { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CheckAuthentication();

        SetEditorContextMain();

        bool? isError = false;
        messageEndPoint = $"{configuration["APIEndpoint"]}/Message";
        messageTemplateEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate";

        try
        {
            mainRecords = await Http.GetFromJsonAsync<List<MessageModel>>(messageEndPoint);
        }
        catch (HttpRequestException ex)
        {
            isError = true;
            HandleJsonException(ex, "Message", MessageID.ToString() ?? "");
        }

        if (isError != true)
        {
            //Load other objects

            try
            {
                messageTemplates = await Http.GetFromJsonAsync<List<MessageTemplateModel>>(messageTemplateEndPoint);
            }
            catch (HttpRequestException ex)
            {
                isError = true;
                HandleJsonException(ex, "MessageTemplate", MessageID.ToString() ?? "");
            }
        }

        PopulateDropDownValuesMain();
    }

    public void SetMainRecords(List<MessageModel> updatedMessages)
    {
        mainRecords = updatedMessages;
        StateHasChanged();
    }

    public void SetMessageModel(MessageModel updatedMessage)
    {
        selectedRecord = updatedMessage;
        StateHasChanged();
    }

    public void SetMessageCopyModel(MessageModel updatedMessage)
    {
        selectedRecordCopy = updatedMessage;
        StateHasChanged();
    }

    private void CheckAuthentication()
    {
        if (appData?.CurrentUser?.Email == null)
        {
            NavManager.NavigateTo("/Login");
        }
    }

    private MessageModel? GetMainRecord(int recordID)
    {
        return
        mainRecords?
        .Where(t => t.MessageID == recordID)
        .FirstOrDefault();
    }

    private void SelectMainRecord(int? recordID)
    {
        if (recordID != null && recordID > 0)
        {
            selectedRecord = GetMainRecord(recordID ?? 0);
        }
        else
        {
            selectedRecord = new MessageModel()
            {
                From = configuration.GetSection("Settings")["EmailAddress"],
                FromName = configuration.GetSection("Settings")["EmailName"]
            };

            //Related Datasets
            MessageTemplateModel blankMessageTemplateModel = new MessageTemplateModel();
            selectedRecord.MessageTemplate = blankMessageTemplateModel;
        }

        //Keep a copy of this object to be used for edit form so original object can remain untouched until save operation (otherwise it changes on screen)
        if (selectedRecord != null)
            selectedRecordCopy = selectedRecord?.Clone();
    }

    public async Task AdvanceToMainRecord(int numRecords)
    {
        if (await SaveMainRecord(false) == true)
        {
            int? currentRecordID = selectedRecord?.MessageID;
            MessageModel? nextRecord = new MessageModel();

            if (numRecords > 0)
            {
                nextRecord =
                ItemsMain?
                .SkipWhile(obj => obj.MessageID != currentRecordID)
                .Skip(numRecords)
                .FirstOrDefault();
            }
            else if (numRecords < 0)
            {
                int numRecordsBack = Math.Abs(numRecords);
                nextRecord =
                    ItemsMain?
                    .Reverse()
                    .SkipWhile(obj => obj.MessageID != currentRecordID)
                    .Skip(numRecordsBack)
                    .FirstOrDefault();
            }

            if (nextRecord != null)
            {
                if (nextRecord?.MessageID != null)
                {
                    selectedRecord = nextRecord;
                    selectedRecordCopy = nextRecord;
                }
            }
        }
    }

    public void PopulateDropDownValuesMain()
    {
        DropDownValues = new List<object?>();

        if (messageTemplates != null)
        {
            foreach (var template in messageTemplates)
            {
                DropDownValues.Add(template);
            }
        }
    }

    public void AddDatabaseFieldToTextArea()
    {
        if (selectedRecordCopy != null)
        {
            selectedRecordCopy.Message = "Changed";
        }
    }

    //Toggles for nullable bools
    public void ToggleMainRecordIsAccepted()
    {
        if (selectedRecordCopy != null)
        {
            if (selectedRecordCopy.IsAccepted == true)
            {
                selectedRecordCopy.IsAccepted = false;
            }
            else
            {
                selectedRecordCopy.IsAccepted = true;
            }
        }
    }

    private void ChangeFilterMain(string fieldName, object? value)
    {
        if (value == null || string.IsNullOrEmpty(value.ToString()))
        {
            if (FilterFieldsMain != null)
            {
                FilterFieldsMain.Remove(fieldName);
            }
        }
        else
        {
            var property = typeof(MessageModel).GetProperty(fieldName.Split('.').First());
            if (property != null)
            {
                var targetType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

                object? convertedValue = null;
                Console.WriteLine($"Filter {fieldName} value {value} type {targetType}");

                if (targetType.IsEnum)
                {
                    try
                    {
                        convertedValue = Enum.Parse(targetType, value.ToString()!);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType.IsClass && targetType != typeof(string))
                {
                    try
                    {
                        //convertedValue = int.Parse(value.ToString()!);
                        convertedValue = Convert.ChangeType(value, targetType.GetProperties().FirstOrDefault()?.PropertyType ?? typeof(int));
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType == typeof(bool) || targetType == typeof(bool?))
                {
                    bool? oldValue = null;
                    bool? newValue = null;

                    //Get old and new value to toggle and discard value sent from UI
                    if (FilterFieldsMain == null)
                        FilterFieldsMain = new Dictionary<string, object?>();

                    if (FilterFieldsMain.ContainsKey(fieldName))
                    {
                        if (bool.TryParse(FilterFieldsMain[fieldName]?.ToString(), out bool oldBool))
                        {
                            oldValue = oldBool;
                        }
                    }

                    if (oldValue == null)
                    {
                        newValue = true;
                    }
                    else if (oldValue == true)
                    {
                        newValue = false;
                    }
                    else
                    {
                        newValue = null;

                    }

                    try
                    {
                        convertedValue = newValue;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else
                {
                    try
                    {
                        convertedValue = Convert.ChangeType(value, targetType);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }

                if (fieldName != null)
                {
                    //Allow bools to be set as NULL
                    if (convertedValue != null || !string.IsNullOrEmpty(convertedValue?.ToString()) || targetType == typeof(bool) || targetType == typeof(bool?))
                    {
                        if (FilterFieldsMain == null)
                        {
                            FilterFieldsMain = new Dictionary<string, object?>();
                        }

                        FilterFieldsMain[fieldName] = convertedValue;
                        //Console.WriteLine($"Filter {fieldName} set to {convertedValue}");
                    }

                }
            }
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filtersMain.Clear();

        if (FilterFieldsMain != null)
        {
            foreach (var filter in FilterFieldsMain)
            {
                var propertyName = filter.Key;
                var propertyValue = filter.Value;
                //Console.WriteLine($"Filter {propertyName} value {propertyValue}");

                var parameter = Expression.Parameter(typeof(MessageModel), "m");
                Expression property = parameter;
                Expression? parentProperty = null;

                foreach (var member in propertyName.Split('.'))
                {
                    //Do not need a not null check on the object itself
                    if (!property.ToString().Equals("m"))
                        parentProperty = property;

                    property = Expression.Property(property, member);
                }

                var constant = Expression.Constant(propertyValue);

                Expression? comparison = null;

                if (propertyValue is string)
                {
                    var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string), typeof(StringComparison) });
                    var isNotNull = Expression.NotEqual(property, Expression.Constant(null));

                    comparison = Expression.Call(property, containsMethod!, constant, Expression.Constant(StringComparison.CurrentCultureIgnoreCase));
                    comparison = Expression.AndAlso(isNotNull, comparison);
                }
                else if (propertyValue is int || propertyValue is decimal || propertyValue is bool || (propertyValue != null && propertyValue.GetType().IsEnum))
                {
                    if (Nullable.GetUnderlyingType(property.Type) != null)
                    {
                        var hasValue = Expression.Property(property, "HasValue");
                        var value = Expression.Property(property, "Value");
                        var equal = Expression.Equal(value, constant);
                        comparison = Expression.AndAlso(hasValue, equal);
                    }
                    else
                    {
                        comparison = Expression.Equal(property, constant);
                    }
                }
                else if (propertyValue is DateTime)
                {
                    if (Nullable.GetUnderlyingType(property.Type) != null)
                    {
                        var hasValue = Expression.Property(property, "HasValue");
                        var value = Expression.Property(property, "Value");
                        var equal = Expression.Equal(value, constant);
                        comparison = Expression.AndAlso(hasValue, equal);
                    }
                    else
                    {
                        comparison = Expression.Equal(property, constant);
                    }
                }

                if (parentProperty != null)
                {
                    var parentNotNull = Expression.NotEqual(parentProperty, Expression.Constant(null));
                    if (comparison != null)
                        comparison = Expression.AndAlso(parentNotNull, comparison);
                }

                if (comparison != null)
                {
                    var lambda = Expression.Lambda<Func<MessageModel, bool>>(comparison, parameter);
                    Console.WriteLine(lambda);
                    filtersMain.Add(lambda.Compile());
                }
            }
        }

        // Trigger UI update
        StateHasChanged();
    }


    public void SetEditorContextMain()
    {
        //When Edit Form is based on an Edit Context this must be called each time the context changes for validation to work
        if (selectedRecordCopy != null)
            EditContextMain = new EditContext(selectedRecordCopy);

        if (EditContextMain != null)
        {
            EditContextMain.OnFieldChanged += ChangeMainRecord;
        }
    }

    public string? action { get; set; }
    public string? soundEffect { get; set; }
    public Modal? modalMainRecord { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    private Modal? modalFormat { get; set; }

    public string? loadDataErrorMsg = null;

    private IDictionary<string, string>? selectedRecordChanges = new Dictionary<string, string>();

    public Dictionary<string, object?>? FilterFieldsMain { get; set; }



    public IList<object?>? DropDownValues { get; set; }

    private void ChangeFilterMainFromComponent((string fieldName, object? value) args)
    {
        ChangeFilterMain(args.fieldName, args.value);
        //Console.WriteLine($"Filter {args.fieldName} value {args.value}");
    }

    private void RemoveFiltersMain()
    {
        if (FilterFieldsMain != null)
        {
            FilterFieldsMain.Clear();
        }
        filtersMain.Clear();

        // Trigger UI update
        StateHasChanged();
    }

    private void RemoveLastFilterMain()
    {
        if (FilterFieldsMain != null)
        {
            string? lastKey = FilterFieldsMain.Keys.LastOrDefault();

            if (lastKey != null)
            {
                FilterFieldsMain.Remove(lastKey);
            }

            ApplyFilters();
        }
    }

    private void RemoveFilterMain(string? fieldName)
    {
        if (fieldName != null)
        {
            if (FilterFieldsMain != null)
                FilterFieldsMain.Remove(fieldName);
        }

        ApplyFilters();
    }

    private void ShowFilterHelpMain()
    {
        action = "Info";
        soundEffect = SoundFunctions.GetErrorSound();

        msgInfoTitle = $"Filtering and Sorting Information";
        msgInfo = (MarkupString)$@"
            <h3><i class=""fa-solid fa-filter""></i> Information on Filtering</h3>
            <p>To filter on a field press the <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-bars""></i></button> button next to the field name in the header and then select or type in your search criteria (depending on the field type).</p>
            <p>Text and numeric fields will show a search box <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-magnifying-glass""></i></button> whereas selection fields will show a drop-down <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-square-caret-down""></i></button> and yes/no fields will show a checkbox <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-square-check""></i></button>.</p>
            <p>Once you have added filters you can clear all these by pressing on the <button type=""button"" class=""btn btn-primary btn-sm"">Clear Filers <i class=""fa-solid fa-filter-circle-xmark""></i></button> button or you can press on the <button type=""button"" class=""btn btn-primary btn-sm"">Clear Last Filter <i class=""fa-solid fa-filter-circle-xmark""></i></button> button to clear the last field you filtered by. These will become visible once you have added your first filter.</p>
            <p>You can also clear individual filters by pressing the <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-filter-circle-xmark""></i></button> button next to each one.</p>
            <h3><i class=""fa-solid fa-arrow-up-a-z""></i> Information on Sorting</h3>
            <p>You can sort a field by clicking on its name in the header row where the first time you press it the column will sort in ascending order <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-arrow-up-a-z""></i></button> and the second time you press it, it will sort in descending order <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-arrow-down-z-a""></i></button>.</p>
            <p>To sort by a different field just click the header of that column and it will replace the sort you had and sort by the new column instead.</p>";

        modalInfo!.Open();
    }

    private async Task FormAction()
    {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm")
        {
            ClearForm();
        }
        else if (action == "CancelMainRecordConfirm")
        {
            CancelMainRecord();
        }
        else if (action == "DeleteMainRecordConfirm")
        {
            await DeleteMainRecord();
        }  
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm()
    {
        action = "ClearFormConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearForm()
    {
        action = "ClearForm";

        selectedRecord = new();

        modalConfirm!.Close();
    }

    protected void ChangeMainRecord(object? sender, FieldChangedEventArgs? e)
    {
        string? fieldName = e?.FieldIdentifier.FieldName;
        string? fieldValue = e?.FieldIdentifier.Model.GetType().GetProperty(fieldName ?? "")?.GetValue(e?.FieldIdentifier.Model)?.ToString();

        fieldValue = StringFunctions.FormatFieldChangedValue(fieldValue);

        if (selectedRecordChanges != null && fieldName != null)
        {
            if (selectedRecordChanges.ContainsKey(fieldName))
            {
                selectedRecordChanges[fieldName] = fieldValue ?? "";
            }
            else
            {
                selectedRecordChanges.Add(fieldName, fieldValue ?? "");
            }
        }

        focusElement = null;
    }

    public void EditMainRecord(int? recordID)
    {
        if (recordID != null)
            SelectMainRecord(recordID);

        SetEditorContextMain();

        if (selectedRecordCopy != null)
        {
            modalMainRecord!.MakeLarge();
            modalMainRecord!.Open();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Record {recordID}";
            msgError = (MarkupString)$"Unfortunately the record could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    public async Task<bool> SaveMainRecord(bool? CloseDialogAfterSave)
    {
        string? saveEndPoint;
        bool returnValue = false;

        if (await _fluentValidationValidator!.ValidateAsync())
        {
            Logger.LogInformation("Id = {Id}", selectedRecordCopy?.MessageID);

            try
            {
                if (selectedRecord != null && selectedRecordCopy != null)
                {
                    //Update related entities (as only IDs are updated on the form so rest of object is not updated)
                    selectedRecordCopy.MessageTemplate = GetMessageTemplate(selectedRecordCopy.MessageTemplate?.MessageTemplateID ?? 0);

                    HttpResponseMessage formResponse = new HttpResponseMessage();

                    if (selectedRecordCopy?.MessageID > 0) {
                        //Update existing record
                        saveEndPoint = $"{configuration["APIEndpoint"]}/Message/{selectedRecord?.MessageID}";
                        formResponse = await Http.PutAsJsonAsync<MessageModel>(saveEndPoint, selectedRecordCopy!);
                    }
                    else 
                    {
                        //Insert new record
                        saveEndPoint = $"{configuration["APIEndpoint"]}/Message";
                        formResponse = await Http.PostAsJsonAsync<MessageModel>(saveEndPoint, selectedRecordCopy!);
                    }

                    if (formResponse.IsSuccessStatusCode != true)
                    {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Save Message Record";
                        msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                    else
                    {
                        //Copy properties back to tracked object being saved
                        selectedRecordCopy.CopyProperties(selectedRecord);

                        selectedRecordChanges?.Clear();

                        soundEffect = SoundFunctions.GetConfirmSound();
                        returnValue = true;

                        if (selectedRecordCopy?.MessageID > 0)
                        {
                            //Update existing record
                            if (CloseDialogAfterSave == true)
                            {
                                CloseMainRecord();
                            }
                        }
                        else 
                        {
                            //Insert new record

                            //Get ID of newly inserted record and add new item to model so shows on screen
                            MessageModel insertedMainRecord = await formResponse.Content.ReadFromJsonAsync<MessageModel>() ?? new MessageModel();

                            if (insertedMainRecord.MessageID > 0)
                            {
                                mainRecords?.Add(insertedMainRecord);

                                if (CloseDialogAfterSave == true)
                                {
                                    CloseMainRecord();
                                }
                            }
                            else
                            {
                                action = "Error";
                                soundEffect = SoundFunctions.GetErrorSound();

                                msgErrorTitle = $"Cannot Save Message Record";
                                msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                                msgErrorStackTrace = null;

                                modalError!.Open();
                            }
                        }
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"Cannot Save Message Record";
                    msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }

            }
            catch (HttpRequestException ex)
            {
                HandleJsonException(ex, "Message", selectedRecordCopy?.MessageID.ToString() ?? "0");
            }
        }

        return returnValue;
    }

    private void DeleteMainRecordConfirm()
    {
        if (selectedRecord?.MessageID > 0)
        {
            action = "DeleteMainRecordConfirm";
            soundEffect = SoundFunctions.GetPromptSound();

            msgConfirmTitle = $"Confirm Delete?";
            msgConfirm = (MarkupString)$"Are you sure you want to delete the message with the Subject \"{selectedRecord.Subject}\" sent to {selectedRecord.To}?";

            modalConfirm!.OpenOnTop1();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"No Message Selected";
            msgError = (MarkupString)$"Please select a message first before pressing the Delete button or if try to select one again if one had been selected.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task DeleteMainRecord()
    {
        action = "DeleteMainRecord";

        string? deleteEndPoint;

        Logger.LogInformation("Id = {Id}", selectedRecord?.MessageID);

        modalConfirm!.Close();

        try
        {
            if (selectedRecord != null)
            {
                MessageModel formResponse = new MessageModel();

                if (selectedRecord?.MessageID > 0)
                {
                    deleteEndPoint = $"{configuration["APIEndpoint"]}/Message/{selectedRecord?.MessageID}";
                    formResponse = await Http.DeleteFromJsonAsync<MessageModel>(deleteEndPoint) ?? new MessageModel();

                    if (formResponse.MessageID > 0)
                    {
                        //Remove record from screen as well
                        mainRecords?.Remove(selectedRecord!);
                    }
                    else
                    {
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Delete Message Record";
                        msgError = (MarkupString)$"Unfortunately the Message Record could not be deleted successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = null;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"No Message Selected";
                    msgError = (MarkupString)$"Please select a message first before pressing the Delete button or if try to select one again if one had been selected.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }
            }
            else
            {
                action = "Error";
                soundEffect = SoundFunctions.GetErrorSound();

                msgErrorTitle = $"Cannot Save Message Record";
                msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "Message", selectedRecord?.MessageID.ToString() ?? "0");
        }
    }

    //Additional Functions
    public async Task LoadMessageTemplate(bool? refreshEditor)
    {
        MessageTemplateModel? selectedTemplate = messageTemplates?
            .Where(t => t.MessageTemplateID == selectedRecordCopy?.MessageTemplate?.MessageTemplateID)
            .FirstOrDefault() ?? new();
        Console.WriteLine($"Selected Template {selectedTemplate.MessageTemplateID}");
        if (selectedTemplate != null && selectedRecordCopy != null)
        {
            selectedRecordCopy.Subject = selectedTemplate.TemplateSubject;
            selectedRecordCopy.Message = selectedTemplate.TemplateContent;
            
            if (refreshEditor == true)
            {
                await ReplaceEditorContent(selectedRecordCopy.Message);
            }
        }
    }

    private MessageTemplateModel? GetMessageTemplate(int messageTemplateID)
    {
        return
        messageTemplates?
        .Where(t => t.MessageTemplateID == messageTemplateID)
        .FirstOrDefault();
    }

    public async Task SendMessage(bool? CloseDialogAfterSave)
    {
        // if (await SaveMainRecord(CloseDialogAfterSave) == true)
        // {
        //Send email
        if (selectedRecordCopy != null)
        {
            SystemEmailModel emailMessage = new SystemEmailModel
                    {
                        SystemEmailID = 1,
                        EmailFrom = selectedRecordCopy.From,
                        EmailFromName = selectedRecordCopy.FromName,
                        EmailTo = selectedRecordCopy.To,
                        EmailToName = selectedRecordCopy.ToName,
                        EmailCC = "robin.wilson@robindigital.co.uk",
                        EmailBCC = null,
                        EmailSubject = selectedRecordCopy.Subject,
                        EmailMessage = selectedRecordCopy.MessageProcessed,
                        IsEmailMessageHTML = true,
                        EmailKey = configuration.GetSection("Settings")["EmailKey"]
                };

            HttpResponseMessage formResponse = new HttpResponseMessage();
            Console.WriteLine($"Email Subject {emailMessage.EmailSubject}");
            if (emailMessage != null)
            {
                Logger.LogInformation("Id = {Id}", emailMessage?.SystemEmailID);

                //Send the Message
                string? sendEmailEndPoint = $"{configuration["APIEndpoint"]}/SystemEmail";
                formResponse = await Http.PostAsJsonAsync<SystemEmailModel>(sendEmailEndPoint, emailMessage!);

                if (formResponse.IsSuccessStatusCode != true)
                {
                    string responseBody = await formResponse.Content.ReadAsStringAsync();
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"Cannot Send Message";
                    msgError = (MarkupString)$"Unfortunately the Message could not be sent successfully due to an error.<br />Please check your network connection and attempt to save again.";
                    msgErrorStackTrace = responseBody;

                    modalError!.Open();
                }
                else
                {

                    //Insert new record

                    //Get ID of newly inserted record and add new item to model so shows on screen
                    SystemEmailModel emailMessageResponse = await formResponse.Content.ReadFromJsonAsync<SystemEmailModel>() ?? new SystemEmailModel();

                    if (emailMessageResponse.IsSent != null)
                    {
                        selectedRecordCopy.IsSent = emailMessageResponse.IsSent;

                        if (emailMessageResponse.IsSent == false)
                        {
                            action = "Error";
                            soundEffect = SoundFunctions.GetErrorSound();

                            msgErrorTitle = $"Cannot Sent Message";
                            msgError = (MarkupString)$"Unfortunately the Message could not be sent successfully due to an error.<br />Please check your network connection and attempt to save again.";
                            msgErrorStackTrace = null;

                            modalError!.Open();
                        }
                        else {
                            selectedRecordCopy.SentDate = DateTime.Now;
                        }
                    }
                    else
                    {
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Sent Message";
                        msgError = (MarkupString)$"Unfortunately the Message could not be sent successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = null;

                        modalError!.Open();
                    }
                }

                await SaveMainRecord(true);
            }
        }
        // }
    }

    //Common Code
    private void CancelMainRecordConfirm()
    {
        action = "CancelMainRecordConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        string? numberOfChanges = $"{selectedRecordChanges?.Count} {(selectedRecordChanges?.Count == 1 ? "Change" : "Changes")}";
        string? listOfChanges = selectedRecordChanges?.Select(x => $"<li>{x.Key}: {x.Value}</li>").Aggregate((x, y) => $"{x}{y}"); //Aggregation in case of duplication
        string? tableName = selectedRecord?.GetType().Name.Replace("Model", "").GetFieldNameWithSpaces(true) ?? "Record";

        msgConfirmTitle = $"Confirm Cancel?";
        msgConfirm = (MarkupString)$@"
            <p>
                You have made the following changes:<br />
                - {tableName}: {numberOfChanges}:
                <ul>
    {listOfChanges}
                </ul>
            </p>
            <p>
                Are you sure you want to cancel and lose these changes?
            </p>";

        modalConfirm!.OpenOnTop1();
    }

    private void CancelMainRecord()
    {
        //selectedRecord = selectedRecordCopy;

        //Set object back to original values
        if (selectedRecord != null)
        {
            //selectedRecord.Subject = selectedRecordCopy?.Subject;
        }

        // if (selectedRecord != null && selectedRecordCopy != null)
        //     selectedRecordCopy.CopyProperties(selectedRecord);

        //Better way?
        // PropertyInfo[]? properties = selectedRecordCopy?.GetType().GetProperties();
        // if (properties != null)
        // {
        //     foreach (PropertyInfo property in properties)
        //     {
        //         // Get the name and value of each property
        //         string? propertyName = property.Name;
        //         object? propertyValue = property.GetValue(selectedRecord);

        //         //Console.WriteLine($"{propertyName}: {propertyValue}");
        //         selectedRecord?.GetType().GetProperty(propertyName)?.SetValue(selectedRecord, propertyValue);
        //         //selectedRecord?.GetType().GetProperty(propertyName)?.SetValue(selectedRecordCopy, selectedRecordCopy?.GetType().GetProperty(propertyName)?.GetValue(selectedRecordCopy));
        //     }
        // }

        CloseMainRecord();
    }

    private void CloseMainRecord()
    {
        modalMainRecord!.Close();
        modalConfirm!.Close();

        selectedRecordChanges?.Clear();
        messagePreview = null;
    }

    private async Task GetCursorPosition()
    {
        var cursorPosition = await JSRuntime.InvokeAsync<int>("tinymceInterop.getCursorPosition");
        Logger.LogInformation("Cursor Position: {CursorPosition}", cursorPosition);
    }

    private async Task InsertTextIntoSubject(string? text)
    {
        string? textToInsert = text;

        Console.WriteLine($"Selected Database Field To Insert into Subject: {textToInsert}");
        await JSRuntime.InvokeVoidAsync("inputInterop.insertTextAtCursor", "subjectInput", textToInsert);
    }

    private async Task AddEditorContent(string? text)
    {
        string? textToInsert = text?.Replace("<", "&lt;").Replace(">", "&gt;");
        Console.WriteLine($"Selected Database Field To Insert into Textarea: {textToInsert}");
        await JSRuntime.InvokeVoidAsync("tinymceInterop.focusEditor");
        await JSRuntime.InvokeVoidAsync("tinymceInterop.insertTextAtCursor", textToInsert);
    }

    private async Task ReplaceEditorContent(string? text)
    {
        string? textToInsert = text;

        await JSRuntime.InvokeVoidAsync("tinymceInterop.replaceEditorContent", textToInsert);
        await JSRuntime.InvokeVoidAsync("tinymceInterop.focusEditor");
    }

    private string? focusElement;
    private void SetFocus(string? field)
    {
        focusElement = field;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //await JSRuntime.InvokeVoidAsync("tinymceInterop.initializeEditor", DotNetObjectReference.Create(this));
        // }
    }

    [JSInvokable]
    public void OnEditorBlur()
    {
        focusElement = "Message";
        //Logger.LogInformation("TinyMCE editor lost focus");
    }

    private async Task InsertDatabaseField()
    {
        if (selectedDatabaseField != null)
        {
            if (focusElement == "Subject")
            {
                await InsertTextIntoSubject(selectedDatabaseField);
            }
            else if (focusElement == "Message")
            {
                await AddEditorContent(selectedDatabaseField);
            }
            else
            {
                // Add as default for now
                await AddEditorContent(selectedDatabaseField);
            }
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Please select a field first using the field selector on the left before pressing the Add Selected Field option";
            msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task InsertDatabaseFieldWithFormat()
    {
        if (selectedDatabaseField != null)
        {
            if (focusElement == "Subject")
            {
                await InsertTextIntoSubject(selectedDatabaseFieldFormatted);
            }
            else if (focusElement == "Message")
            {
                await AddEditorContent(selectedDatabaseFieldFormatted);
            }
            else
            {
                // Add as default for now
                await AddEditorContent(selectedDatabaseFieldFormatted);
            }
            modalFormat!.Close();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Please select a field first using the field selector on the left before pressing the Add Selected Field option";
            msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void InsertDatabaseFieldFromFormat()
    {

        modalFormat!.OpenOnTop1();
    }

    public void PreviewMessage()
    {
        string? processedSubject = selectedRecordCopy?.Subject;
        string? processedMessage = selectedRecordCopy?.Message;
        MarkupString? preview;

        if (selectedRecordCopy != null)
        {
            processedSubject = ModelFunctions.DoAllDatabaseReplacements(processedSubject, selectedRecordCopy);
            processedMessage = ModelFunctions.DoAllDatabaseReplacements(processedMessage, selectedRecordCopy);
        }

        if (selectedRecordCopy != null)
        {
            selectedRecordCopy.SubjectProcessed = processedSubject;
            selectedRecordCopy.MessageProcessed = processedMessage;
        }

        preview = (MarkupString?)$@"
            From {selectedRecordCopy?.FromName} &lt;{selectedRecordCopy?.From}&gt;
            <hr />
            To {selectedRecordCopy?.ToName} &lt;{selectedRecordCopy?.To}&gt;
            <hr />
            Subject {selectedRecordCopy?.SubjectProcessed}
            <hr />
        {selectedRecordCopy?.MessageProcessed ?? ""}
            ";

        messagePreview = preview;
    }

    private void HandleJsonException(HttpRequestException ex, string objectName, string objectID)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";

            //Redirect to login screen
            NavManager.NavigateTo($"Login/Vehicles");
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" is not found";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" resulted in an invalid request";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
