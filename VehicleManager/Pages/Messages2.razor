@page "/Messages2"
@page "/Messages2/{MessageID}"

@using VehicleManager.Models
@using VehicleManager.Services
@using VehicleManager.Shared
@using VehicleManager.Components
@using System.Net
@using Microsoft.AspNetCore.Components.QuickGrid
@using TinyMCE.Blazor
@using System.Globalization
@using System.Reflection
@using System.Linq.Expressions

@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<MessageModel> Logger
@inject AppData appData
@inject IJSRuntime JSRuntime

<PageTitle>Messages @@ Broken Motor</PageTitle>

<audio src="@soundEffect" autoplay></audio>

@if (loadDataErrorMsg != null) 
{
    
}
else if (mainRecords == null)
{

}
else {
    


            <EditForm EditContext="@EditContextMain" OnValidSubmit="() => SaveMainRecord(true)">
                <FluentValidationValidator @ref="_fluentValidationValidator" />
                <div class="bd-callout bd-callout-VM bd-callout-grey GreyBackground">
                    <div class="container">

                        @if (selectedRecordCopy == null) {
                            <div class="row">
                                <div class="col-md">
                                    <div class="alert alert-primary text-center" role="alert">
                                        <h1>
                                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                                        </h1>
                                    </div>
                                </div>
                            </div>
                        }
                        else {

                            <div class="row g-3 mb-3">
                                <div class="col-md-2">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Subject</label>
                                </div>
                                <div class="col-md-10">
                                    <InputText @bind-Value="selectedRecordCopy!.Subject" class="form-control" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.Subject)" />
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    Message
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <Editor ScriptSrc="./lib/tinymce/tinymce.min.js" @bind-Value="selectedRecordCopy!.Message" Field="() => selectedRecordCopy!.Message" LicenseKey="gpl" />
                                    @* <InputTextArea @bind-Value="selectedRecordCopy!.Message" class="form-control" /> *@
                                    <ValidationMessage For="@(() => selectedRecordCopy!.Message)" />
                                </div>
                            </div>

                            

                        }
                    </div>
                </div>

                <ValidationSummary />

            </EditForm>
        
}

@code {
    [Parameter]
    public int? MessageID { get; set; }

    public EditContext? EditContextMain { get; set; }
    public FluentValidationValidator? _fluentValidationValidator;

    private string? messageEndPoint;
    private string? messageTemplateEndPoint;

    private IList<Func<MessageModel, bool>> filtersMain = new List<Func<MessageModel, bool>>();

    private IQueryable<MessageModel>? ItemsMain =>
        mainRecords?.AsQueryable().Where(m => filtersMain.All(filter => filter(m)));

    private void AddFilterMain(Func<MessageModel, bool> filter)
    {
        filtersMain.Add(filter);
    }

    private void RemoveFilterMain(Func<MessageModel, bool> filter)
    {
        filtersMain.Remove(filter);
    }

    [Parameter]
    public List<MessageModel>? mainRecords { get; set; }

    [Parameter]
    public MessageModel? selectedRecord { get; set; } = new MessageModel();
    [Parameter]
    public MessageModel? selectedRecordCopy { get; set; } = new MessageModel();

    //Related datasets
    private List<MessageTemplateModel>? messageTemplates { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CheckAuthentication();

        SetEditorContextMain();

        bool? isError = false;
        messageEndPoint = $"{configuration["APIEndpoint"]}/Message";
        messageTemplateEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate";

        try
        {
            mainRecords = await Http.GetFromJsonAsync<List<MessageModel>>(messageEndPoint);
        }
        catch (HttpRequestException ex)
        {
            isError = true;
            HandleJsonException(ex, "Message", MessageID.ToString() ?? "");
        }

        if (isError != true)
        {
            //Load other objects

            try
            {
                messageTemplates = await Http.GetFromJsonAsync<List<MessageTemplateModel>>(messageTemplateEndPoint);
            }
            catch (HttpRequestException ex)
            {
                isError = true;
                HandleJsonException(ex, "MessageTemplate", MessageID.ToString() ?? "");
            }
        }

        PopulateDropDownValuesMain();
    }

    public void SetMainRecords(List<MessageModel> updatedMessages)
    {
        mainRecords = updatedMessages;
        StateHasChanged();
    }

    public void SetMessageModel(MessageModel updatedMessage)
    {
        selectedRecord = updatedMessage;
        StateHasChanged();
    }

    public void SetMessageCopyModel(MessageModel updatedMessage)
    {
        selectedRecordCopy = updatedMessage;
        StateHasChanged();
    }

    private void CheckAuthentication()
    {
        if (appData?.CurrentUser?.Email == null)
        {
            NavManager.NavigateTo("/Login");
        }
    }

    private MessageModel? GetMainRecord(int recordID)
    {
        return
        mainRecords?
        .Where(t => t.MessageID == recordID)
        .FirstOrDefault();
    }

    private void SelectMainRecord(int? recordID)
    {

    }

    public async Task AdvanceToMainRecord(int numRecords)
    {
        
    }

    public void PopulateDropDownValuesMain()
    {
        DropDownValues = new List<object?>();

        if (messageTemplates != null)
        {
            foreach (var template in messageTemplates)
            {
                DropDownValues.Add(template);
            }
        }
    }

    public void AddDatabaseFieldToTextArea()
    {
        if (selectedRecordCopy != null)
        {
            selectedRecordCopy.Message = "Changed";
        }
    }

    //Toggles for nullable bools
    public void ToggleMainRecordIsAccepted()
    {

    }

    private void ChangeFilterMain(string fieldName, object? value)
    {
        

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        


        // Trigger UI update
        StateHasChanged();
    }


    public void SetEditorContextMain()
    {
        //When Edit Form is based on an Edit Context this must be called each time the context changes for validation to work
        if (selectedRecordCopy != null)
            EditContextMain = new EditContext(selectedRecordCopy);

        if (EditContextMain != null)
        {
            EditContextMain.OnFieldChanged += ChangeMainRecord;
        }
    }

    public string? action { get; set; }
    public string? soundEffect { get; set; }
    private Modal? modalMainRecord { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    public string? loadDataErrorMsg = null;

    private IDictionary<string, string>? selectedRecordChanges = new Dictionary<string, string>();

    public Dictionary<string, object?>? FilterFieldsMain { get; set; }



    public IList<object?>? DropDownValues { get; set; }

    private void ChangeFilterMainFromComponent((string fieldName, object? value) args)
    {
        ChangeFilterMain(args.fieldName, args.value);
        //Console.WriteLine($"Filter {args.fieldName} value {args.value}");
    }

    private void RemoveFiltersMain()
    {

    }

    private void RemoveLastFilterMain()
    {

    }

    private void RemoveFilterMain(string? fieldName)
    {

    }

    private void ShowFilterHelpMain()
    {

    }

    private async Task FormAction()
    {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm")
        {
            ClearForm();
        }
        else if (action == "CancelMainRecordConfirm")
        {
            CancelMainRecord();
        }
        else if (action == "DeleteMainRecordConfirm")
        {
            await DeleteMainRecord();
        }  
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm()
    {
        action = "ClearFormConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearForm()
    {
        action = "ClearForm";

        selectedRecord = new();

        modalConfirm!.Close();
    }

    protected void ChangeMainRecord(object? sender, FieldChangedEventArgs? e)
    {
        string? fieldName = e?.FieldIdentifier.FieldName;
        string? fieldValue = e?.FieldIdentifier.Model.GetType().GetProperty(fieldName ?? "")?.GetValue(e?.FieldIdentifier.Model)?.ToString();

        fieldValue = StringFunctions.FormatFieldChangedValue(fieldValue);

        if (selectedRecordChanges != null && fieldName != null)
        {
            if (selectedRecordChanges.ContainsKey(fieldName))
            {
                selectedRecordChanges[fieldName] = fieldValue ?? "";
            }
            else
            {
                selectedRecordChanges.Add(fieldName, fieldValue ?? "");
            }
        }
    }

    public void EditMainRecord(int? recordID)
    {
        if (recordID != null)
            SelectMainRecord(recordID);

        SetEditorContextMain();

        if (selectedRecordCopy != null)
        {
            modalMainRecord!.MakeLarge();
            modalMainRecord!.Open();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Record {recordID}";
            msgError = (MarkupString)$"Unfortunately the record could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    public async Task<bool> SaveMainRecord(bool? CloseDialogAfterSave)
    {


        return true;
    }

    private void DeleteMainRecordConfirm()
    {
        if (selectedRecord?.MessageID > 0)
        {
            action = "DeleteMainRecordConfirm";
            soundEffect = SoundFunctions.GetPromptSound();

            msgConfirmTitle = $"Confirm Delete?";
            msgConfirm = (MarkupString)$"Are you sure you want to delete the message with the Subject \"{selectedRecord.Subject}\" sent to {selectedRecord.To}?";

            modalConfirm!.OpenOnTop1();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"No Message Selected";
            msgError = (MarkupString)$"Please select a message first before pressing the Delete button or if try to select one again if one had been selected.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task DeleteMainRecord()
    {
        action = "DeleteMainRecord";

        string? deleteEndPoint;

        Logger.LogInformation("Id = {Id}", selectedRecord?.MessageID);

        modalConfirm!.Close();

        try
        {
            
            

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "Message", selectedRecord?.MessageID.ToString() ?? "0");
        }
    }

    //Additional Functions
    private MessageTemplateModel? GetMessageTemplate(int messageTemplateID)
    {
        return
        messageTemplates?
        .Where(t => t.MessageTemplateID == messageTemplateID)
        .FirstOrDefault();
    }

    public async Task SendMessage(bool? CloseDialogAfterSave)
    {
        if (await SaveMainRecord(CloseDialogAfterSave) == true)
        {
            //Send email
        }
    }

    //Common Code
    private void CancelMainRecordConfirm()
    {

    }

    private void CancelMainRecord()
    {

    }

    private void CloseMainRecord()
    {


    }

    private void HandleJsonException(HttpRequestException ex, string objectName, string objectID)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";

            //Redirect to login screen
            NavManager.NavigateTo($"Login/Vehicles");
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" is not found";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" resulted in an invalid request";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
