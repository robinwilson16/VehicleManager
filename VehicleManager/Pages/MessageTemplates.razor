@page "/MessageTemplates"
@page "/MessageTemplates/{MessageTemplateID}"

@using VehicleManager.Models
@using VehicleManager.Services
@using VehicleManager.Shared
@using System.Net
@using Microsoft.AspNetCore.Components.QuickGrid
@using TinyMCE.Blazor

@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<MessageTemplateModel> Logger
@inject AppData appData

<PageTitle>Message Templates @@ Broken Motor</PageTitle>

<audio src="@soundEffect" autoplay></audio>

<Modal @ref="modalInfo">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        <p>
            @msgInfo
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalInfo!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalError!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null)
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalConfirm!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<h3><i class="fa-solid fa-message"></i> Message Templates</h3>

@if (loadDataErrorMsg != null) 
{
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="alert alert-danger hstack gap-3" role="alert">
                    <div>
                        <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                    </div>
                    <div>
                        <p>
                            @loadDataErrorMsg
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (mainRecords == null)
{
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="alert alert-primary text-center" role="alert">
                    <h1>
                        <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                    </h1>
                </div>
            </div>
        </div>
    </div>
}
else {
    <div class="container-fluid">
        <div class="row">
            <div class="col-md TableArea pt-3 rounded">
                <div class="alert alert-primary" role="alert">
                    @if (FiltersMain.Count > 0)
                    {
                        <button type="button" class="btn btn-primary btn-sm me-3" @onclick="@FilterMainClear">Filters (Clear) <i class="fa-solid fa-filter-circle-xmark"></i></button>

                        int filterNumber = 0;
                        @foreach (var filter in FiltersMain)
                        {
                            filterNumber += 1;

                            @if (filterNumber > 1) {
                                <span class="ps-3 pe-3">|</span>
                            }
                            <span>@filter</span>
                        }
                    }
                </div>
                <div class="TableContainer">
                    <div class="table-responsive">
                        <QuickGrid Items="@FilteredMainRecords" Virtualize="true" Class="table table-striped table-hover table-bordered" TGridItem="MessageTemplateModel">

                            <TemplateColumn Title="" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.MessageTemplateID)">
                                <button type="button" class="btn btn-primary btn-sm" @onclick="()=>EditMainRecord(context.MessageTemplateID)"><i class="fa-solid fa-up-right-from-square"></i></button>
                            </TemplateColumn>

                            <TemplateColumn Title="ID" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.MessageTemplateID)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.MessageTemplateID</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="number" class="form-control" autofocus @bind="FilterMainMessageTemplateID" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Code" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.Code)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.Code</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainCode" @bind:event="oninput" placeholder="Code..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Name" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.Name)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.Name</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainName" @bind:event="oninput" placeholder="Name..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Sequence" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.Sequence)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start text-center">@context.Sequence</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainSequence" @bind:event="oninput" placeholder="Sequence..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Is Enabled" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.IsEnabled)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start text-center">
                                            <i class="@CSSFunctions.BoolCSS(context.IsEnabled)"></i>
                                        </div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <button type="button" class="btn @(FilterMainIsEnabled == true? "btn-primary" : "btn-outline-primary")" @onclick="ToggleFilterMainIsEnabled"><i class="@(FilterMainIsEnabled == null? "fa-regular fa-square-minus" : FilterMainIsEnabled == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Created By" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.CreatedBy)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.CreatedBy</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainCreatedBy" @bind:event="oninput" placeholder="Created By..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Created Date" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.CreatedDate)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@(context?.CreatedDate == null? "" : context?.CreatedDate.Value.ToString("dd/MM/yyyy"))</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="date" class="form-control" autofocus @bind="FilterMainCreatedDate" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Last Updated By" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.LastUpdatedBy)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@context.LastUpdatedBy</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" class="form-control" autofocus @bind="FilterMainLastUpdatedBy" @bind:event="oninput" placeholder="Last Updated By..." @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                            <TemplateColumn Title="Last Updated Date" Sortable="true" SortBy="GridSort<MessageTemplateModel>.ByDescending(x => x.LastUpdatedDate)">
                                <ChildContent>
                                    <div @onclick="()=>SelectMainRecord(context?.MessageTemplateID)" class="@TableCSS(context)">
                                        <div class="col-justify-start">@(context?.CreatedDate == null ? "" : context?.CreatedDate.Value.ToString("dd/MM/yyyy"))</div>
                                    </div>
                                </ChildContent>
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="date" class="form-control" autofocus @bind="FilterMainLastUpdatedDate" @bind:event="oninput" @onkeyup="FilterMainRefresh" @onchange="FilterMainRefresh" />
                                    </div>
                                </ColumnOptions>
                            </TemplateColumn>

                        </QuickGrid>
                    </div>
                </div>
                <div class="alert alert-secondary" role="alert">
                    <div class="row">
                        <div class="col-md">
                            <div class="d-grid gap-2 d-md-block text-start">
                                <button type="button" class="btn btn-primary me-md-3" @onclick="()=>EditMainRecord(null)"><i class="fa-solid fa-square-plus"></i> New...</button>
                                <button type="button" class="btn btn-danger me-md-3" @onclick="DeleteMainRecordConfirm" disabled="@(selectedRecord?.MessageTemplateID == 0 ? true : false)"><i class="fa-solid fa-trash-can"></i> Delete...</button>
                                @if (selectedRecord?.MessageTemplateID > 0) {
                                    <span>1 Record Selected</span>
                                }
                            </div>
                        </div>
                        <div class="col-md text-end">

                            @if (FiltersMain.Count > 0)
                            {
                                <div class="col-md text-end fw-bold text-primary">
                                    @FilteredMainRecords?.Count() Records (Filtered)
                                </div>
                            }
                            else {
                                <div class="col-md text-end">
                                    @FilteredMainRecords?.Count() Records
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <Modal @ref="modalMessageTemplate">
        <WindowControls>
            @if (selectedRecordChanges?.Count > 0)
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelMainRecordConfirm"></button>
            }
            else
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalMessageTemplate!.Close()"></button>
            }
        </WindowControls>
        <Title>
            @if (@selectedRecordCopy?.MessageTemplateID > 0)
            {
                @:<i class="fa-solid fa-message"></i> Message Template @selectedRecordCopy?.MessageTemplateID
            }
            else {
                @:<i class="fa-solid fa-message"></i> New Message Template
            }
        </Title>
        <Body>
            <EditForm EditContext="@EditContextMain" OnValidSubmit="() => SaveMainRecord(true)">
                <FluentValidationValidator @ref="_fluentValidationValidator" />
                <div class="bd-callout bd-callout-VM bd-callout-grey GreyBackground">
                    <div class="container">

                        @if (selectedRecordCopy == null) {
                            <div class="row">
                                <div class="col-md">
                                    <div class="alert alert-primary text-center" role="alert">
                                        <h1>
                                            <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                                        </h1>
                                    </div>
                                </div>
                            </div>
                        }
                        else {

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Code</label>
                                </div>
                                <div class="col-md-8">
                                    <InputText @bind-Value="selectedRecordCopy!.Code" class="form-control" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.Code)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Name</label>
                                </div>
                                <div class="col-md-8">
                                    <InputText @bind-Value="selectedRecordCopy!.Name" class="form-control" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.Name)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    Template Text
                                </div>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md">
                                    <Editor ScriptSrc="./lib/tinymce/tinymce.min.js" @bind-Value="selectedRecordCopy!.TemplateContent" Field="() => selectedRecordCopy!.TemplateContent" LicenseKey="gpl" />
                                    @* <InputTextArea @bind-Value="selectedRecordCopy!.TemplateContent" class="form-control" /> *@
                                    <ValidationMessage For="@(() => selectedRecordCopy!.TemplateContent)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Sequence</label>
                                </div>
                                <div class="col-md-8">
                                    <InputNumber @bind-Value="selectedRecordCopy!.Sequence" class="form-control" />
                                    <ValidationMessage For="@(() => selectedRecordCopy!.Sequence)" />
                                </div>
                            </div>

                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Is Enabled</label>
                                </div>
                                <div class="col-md-8">
                                    <div class="d-grid gap-2 d-md-block">
                                        <button type="button" class="btn @(selectedRecordCopy!.IsEnabled == true? "btn-primary" : "btn-outline-primary") me-md-3" @onclick="(e) => ToggleMainRecordIsEnabled()"><i class="@(selectedRecordCopy!.IsEnabled == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                    </div>
                                    <ValidationMessage For="@(() => selectedRecordCopy!.IsEnabled)" />
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <ValidationSummary />

            </EditForm>
        </Body>
        <Footer>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(-1)"><i class="fa-solid fa-square-caret-left"></i></button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(1)"><i class="fa-solid fa-square-caret-right"></i></button>
            @if (selectedRecordChanges?.Count > 0)
            {
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(true)"><i class="fa-solid fa-floppy-disk"></i> Save and Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(false)"><i class="fa-solid fa-floppy-disk"></i> Save</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="CancelMainRecordConfirm"><i class="fa-solid fa-rotate-left"></i> Cancel <strong>@(selectedRecordChanges?.Count ?? 1)</strong> Changes</button>
            }
            else 
            {
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseMainRecord"><i class="fa-solid fa-rotate-left"></i> Close</button>
            }

        </Footer>
    </Modal>
}

@code {
    public EditContext? EditContextMain { get; set; }
    private FluentValidationValidator? _fluentValidationValidator;

    public string? action { get; set; }
    public string? soundEffect { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    public string? loadDataErrorMsg = null;

    [Parameter]
    public int? MessageTemplateID { get; set; }

    private List<MessageTemplateModel>? mainRecords { get; set; }

    [SupplyParameterFromForm]
    public MessageTemplateModel? selectedRecord { get; set; } = new MessageTemplateModel();
    private MessageTemplateModel? selectedRecordCopy { get; set; } = new MessageTemplateModel();
    private IDictionary<string, string>? selectedRecordChanges = new Dictionary<string, string>();

    private IQueryable<MessageTemplateModel>? FilteredMainRecords =>
        (mainRecords)?.AsQueryable()
        .Where(
            t => 
            (FilterMainMessageTemplateID == null ? true : t.MessageTemplateID == (FilterMainMessageTemplateID ?? t.MessageTemplateID))
            && (FilterMainCode == null ? true : (t.Code ?? string.Empty).Contains(FilterMainCode, StringComparison.CurrentCultureIgnoreCase))
            && (FilterMainName == null ? true : (t.Name ?? string.Empty).Contains(FilterMainName, StringComparison.CurrentCultureIgnoreCase))
            && (FilterMainTemplateContent == null ? true : (t.TemplateContent ?? string.Empty).Contains(FilterMainTemplateContent, StringComparison.CurrentCultureIgnoreCase))
            && (FilterMainSequence == null ? true : t.Sequence == FilterMainSequence)
            && (FilterMainIsEnabled == null ? true : t.IsEnabled == FilterMainIsEnabled)
            && (FilterMainCreatedBy == null ? true : (t.CreatedBy ?? string.Empty).Contains(FilterMainCreatedBy, StringComparison.CurrentCultureIgnoreCase))
            && (FilterMainCreatedDate == null ? true : DateOnly.FromDateTime(t.CreatedDate ?? DateTime.MinValue) == DateOnly.FromDateTime((DateTime)(FilterMainCreatedDate ?? t.CreatedDate)!))
            && (FilterMainLastUpdatedBy == null ? true : (t.LastUpdatedBy ?? string.Empty).Contains(FilterMainLastUpdatedBy, StringComparison.CurrentCultureIgnoreCase))
            && (FilterMainLastUpdatedDate == null ? true : DateOnly.FromDateTime(t.LastUpdatedDate ?? DateTime.MinValue) == DateOnly.FromDateTime((DateTime)(FilterMainLastUpdatedDate ?? t.LastUpdatedDate)!))
        );

    List<string> FiltersMain = new List<string>();
    int? FilterMainMessageTemplateID;
    string? FilterMainCode;
    string? FilterMainName;
    string? FilterMainTemplateContent;
    int? FilterMainSequence;
    bool? FilterMainIsEnabled;
    string? FilterMainCreatedBy;
    DateTime? FilterMainCreatedDate;
    string? FilterMainLastUpdatedBy;
    DateTime? FilterMainLastUpdatedDate;

    private string? messageTemplateEndPoint;

    private Modal? modalMessageTemplate { get; set; }

    protected override async Task OnInitializedAsync() 
    {
        SetEditorContextMain();

        bool? isError = false;
        messageTemplateEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate";

        try
        {
            mainRecords = await Http.GetFromJsonAsync<List<MessageTemplateModel>>(messageTemplateEndPoint);
        }
        catch (HttpRequestException ex)
        {
            isError = true;
            HandleJsonException(ex, "MessageTemplate", MessageTemplateID.ToString() ?? "");
        }

        if (isError != true)
        {
            //Load other objects
        }
    }

    public void SetEditorContextMain()
    {
        //When Edit Form is based on an Edit Context this must be called each time the context changes for validation to work
        if (selectedRecordCopy != null)
            EditContextMain = new EditContext(selectedRecordCopy);

        if (EditContextMain != null)
        {
            EditContextMain.OnFieldChanged += ChangeMainRecord;
        }
    }

    public string TableCSS(MessageTemplateModel? context)
    {
        string css = "";
        if (context?.MessageTemplateID == selectedRecord?.MessageTemplateID)
        {
            css = "SelectedRow";
        }
        else if (context?.IsEnabled != true)
        {
            css = "DisabledRow";
        }

        return css;
    }

    private void FilterMainRefresh()
    {
        FiltersMain.Clear();

        if (FilterMainMessageTemplateID != null)
        {
            FiltersMain.Add($"ID: '{FilterMainMessageTemplateID.ToString()}'");
        }
        if (FilterMainCode != null)
        {
            FiltersMain.Add($"Code: '{FilterMainCode}'");
        }
        if (FilterMainName != null)
        {
            FiltersMain.Add($"Name: '{FilterMainName}'");
        }
        if (FilterMainTemplateContent != null)
        {
            FiltersMain.Add($"Template Content: '{FilterMainTemplateContent}'");
        }
        if (FilterMainSequence != null)
        {
            FiltersMain.Add($"Sequence: '{FilterMainSequence.ToString()}'");
        }
        if (FilterMainIsEnabled != null)
        {
            FiltersMain.Add($"Accepted: '{((bool)(FilterMainIsEnabled = true) ? "Y" : "N")}'");
        }
        if (FilterMainCreatedBy != null)
        {
            FiltersMain.Add($"Created By: '{FilterMainCreatedBy}'");
        }
        if (FilterMainCreatedDate != null)
        {
            FiltersMain.Add($"Created Date: '{FilterMainCreatedDate.Value.ToString("dd/MM/yyyy")}'");
        }
        if (FilterMainLastUpdatedBy != null)
        {
            FiltersMain.Add($"Last Updated By: '{FilterMainLastUpdatedBy}'");
        }
        if (FilterMainLastUpdatedDate != null)
        {
            FiltersMain.Add($"Last Updated Date: '{FilterMainLastUpdatedDate.Value.ToString("dd/MM/yyyy")}'");
        }
    }

    private void FilterMainClear()
    {
        FilterMainMessageTemplateID = null;
        FilterMainCode = null;
        FilterMainName = null;
        FilterMainTemplateContent = null;
        FilterMainSequence = null;
        FilterMainIsEnabled = null;
        FilterMainCreatedBy = null;
        FilterMainCreatedDate = null;
        FilterMainLastUpdatedBy = null;
        FilterMainLastUpdatedDate = null;

        FiltersMain.Clear();
    }

    public void ToggleFilterMainIsEnabled()
    {
        if (FilterMainIsEnabled == null)
        {
            FilterMainIsEnabled = true;
        }
        else if (FilterMainIsEnabled == true)
        {
            FilterMainIsEnabled = false;
        }
        else if (FilterMainIsEnabled == false)
        {
            FilterMainIsEnabled = null;
        }

        FilterMainRefresh();
    }

    private async Task FormAction()
    {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm")
        {
            ClearForm();
        }
        else if (action == "CancelMainRecordConfirm")
        {
            CancelMainRecord();
        }
        else if (action == "DeleteMainRecordConfirm")
        {
            await DeleteMainRecord();
        }  
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm()
    {
        action = "ClearFormConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearForm()
    {
        action = "ClearForm";

        selectedRecord = new MessageTemplateModel();

        modalConfirm!.Close();
    }

    private MessageTemplateModel? GetMainRecord(int recordID)
    {
        return mainRecords?.Where(t => t.MessageTemplateID == recordID).FirstOrDefault();
    }

    private void SelectMainRecord(int? recordID)
    {
        if (recordID != null && recordID > 0)
        {
            selectedRecord = GetMainRecord(recordID ?? 0);
        }
        else
        {
            selectedRecord = new MessageTemplateModel();
        }

        //Keep a copy of this object to be used for edit form so original object can remain untouched until save operation (otherwise it changes on screen)
        if (selectedRecord != null)
            selectedRecordCopy = selectedRecord?.Clone();
    }

    public async Task AdvanceToMainRecord(int numRecords)
    {
        if (await SaveMainRecord(false) == true)
        {
            int? currentRecordID = selectedRecord?.MessageTemplateID;
            MessageTemplateModel? nextRecord = new MessageTemplateModel();

            if (numRecords > 0)
            {
                nextRecord =
                FilteredMainRecords?
                .SkipWhile(obj => obj.MessageTemplateID != currentRecordID)
                .Skip(numRecords)
                .FirstOrDefault();
            }
            else if (numRecords < 0)
            {
                int numRecordsBack = Math.Abs(numRecords);
                nextRecord =
                    FilteredMainRecords?
                    .Reverse()
                    .SkipWhile(obj => obj.MessageTemplateID != currentRecordID)
                    .Skip(numRecordsBack)
                    .FirstOrDefault();
            }

            if (nextRecord != null)
            {
                if (nextRecord?.MessageTemplateID != null)
                {
                    selectedRecord = nextRecord;
                    selectedRecordCopy = nextRecord;
                }
            }
        }
    }

    public void ToggleMainRecordIsEnabled()
    {
        if (selectedRecordCopy != null)
        {
            if (selectedRecordCopy.IsEnabled == true)
            {
                selectedRecordCopy.IsEnabled = false;
            }
            else
            {
                selectedRecordCopy.IsEnabled = true;
            }
        }
    }

    protected void ChangeMainRecord(object? sender, FieldChangedEventArgs? e)
    {
        string? fieldName = e?.FieldIdentifier.FieldName;
        string? fieldValue = e?.FieldIdentifier.Model.GetType().GetProperty(fieldName ?? "")?.GetValue(selectedRecordCopy)?.ToString();

        fieldValue = StringFunctions.FormatFieldChangedValue(fieldValue);

        if (selectedRecordChanges != null && fieldName != null)
        {
            if (selectedRecordChanges.ContainsKey(fieldName))
            {
                selectedRecordChanges[fieldName] = fieldValue ?? "";
            }
            else
            {
                selectedRecordChanges.Add(fieldName, fieldValue ?? "");
            }
        }
    }

    private void EditMainRecord(int? messageTemplateID)
    {
        SelectMainRecord(messageTemplateID);

        SetEditorContextMain();

        if (selectedRecordCopy != null)
        {
            modalMessageTemplate!.MakeLarge();
            modalMessageTemplate!.Open();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Message Template {messageTemplateID}";
            msgError = (MarkupString)$"Unfortunately the message template could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task<bool> SaveMainRecord(bool? CloseDialogAfterSave)
    {
        string? saveEndPoint;
        bool returnValue = false;

        if (await _fluentValidationValidator!.ValidateAsync())
        {
            Logger.LogInformation("Id = {Id}", selectedRecord?.MessageTemplateID);

            try
            {
                if (selectedRecord != null && selectedRecordCopy != null)
                {
                    //Update related entities (as only IDs are updated on the form so rest of object is not updated)
                    //None

                    HttpResponseMessage formResponse = new HttpResponseMessage();

                    if (selectedRecordCopy?.MessageTemplateID > 0) {
                        //Update existing record
                        saveEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate/{selectedRecordCopy?.MessageTemplateID}";
                        formResponse = await Http.PutAsJsonAsync<MessageTemplateModel>(saveEndPoint, selectedRecordCopy!);
                    }
                    else 
                    {
                        //Insert new record
                        saveEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate";
                        formResponse = await Http.PostAsJsonAsync<MessageTemplateModel>(saveEndPoint, selectedRecordCopy!);
                    }

                    if (formResponse.IsSuccessStatusCode != true)
                    {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Save Message Template Record";
                        msgError = (MarkupString)$"Unfortunately the Message Template Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                    else
                    {
                        //Copy properties back to tracked object being saved
                        selectedRecordCopy.CopyProperties(selectedRecord);

                        selectedRecordChanges?.Clear();

                        soundEffect = SoundFunctions.GetConfirmSound();
                        returnValue = true;

                        if (selectedRecordCopy?.MessageTemplateID > 0)
                        {
                            //Update existing record
                            if (CloseDialogAfterSave == true)
                            {
                                CloseMainRecord();
                            }
                        }
                        else 
                        {
                            //Insert new record

                            //Get ID of newly inserted record and add new item to model so shows on screen
                            MessageTemplateModel insertedMessageTemplate = await formResponse.Content.ReadFromJsonAsync<MessageTemplateModel>() ?? new MessageTemplateModel();

                            if (insertedMessageTemplate.MessageTemplateID > 0)
                            {
                                mainRecords?.Add(insertedMessageTemplate);

                                if (CloseDialogAfterSave == true)
                                {
                                    CloseMainRecord();
                                }
                            }
                            else
                            {
                                action = "Error";
                                soundEffect = SoundFunctions.GetErrorSound();

                                msgErrorTitle = $"Cannot Save Message Template Record";
                                msgError = (MarkupString)$"Unfortunately the Message Template Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                                msgErrorStackTrace = null;

                                modalError!.Open();
                            }
                        }
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"Cannot Save Message Template Record";
                    msgError = (MarkupString)$"Unfortunately the Message Template Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }

            }
            catch (HttpRequestException ex)
            {
                HandleJsonException(ex, "MessageTemplate", selectedRecordCopy?.MessageTemplateID.ToString() ?? "0");
            }
        }

        return returnValue;
    }

    private void DeleteMainRecordConfirm()
    {
        if (selectedRecord?.MessageTemplateID > 0)
        {
            action = "DeleteMainRecordConfirm";
            soundEffect = SoundFunctions.GetPromptSound();

            msgConfirmTitle = $"Confirm Delete?";
            msgConfirm = (MarkupString)$"Are you sure you want to delete the message template named \"{selectedRecord.Name}\"?";

            modalConfirm!.OpenOnTop1();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"No Message Template Selected";
            msgError = (MarkupString)$"Please select a message template first before pressing the Delete button or if try to select one again if one had been selected.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task DeleteMainRecord()
    {
        action = "DeleteMainRecord";

        string? deleteEndPoint;

        Logger.LogInformation("Id = {Id}", selectedRecord?.MessageTemplateID);

        modalConfirm!.Close();

        try
        {
            if (selectedRecord != null)
            {
                MessageTemplateModel formResponse = new MessageTemplateModel();

                if (selectedRecord?.MessageTemplateID > 0)
                {
                    deleteEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate/{selectedRecord?.MessageTemplateID}";
                    formResponse = await Http.DeleteFromJsonAsync<MessageTemplateModel>(deleteEndPoint) ?? new MessageTemplateModel();

                    if (formResponse.MessageTemplateID > 0)
                    {
                        //Remove record from screen as well
                        mainRecords?.Remove(selectedRecord!);
                    }
                    else
                    {
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Delete Message Template Record";
                        msgError = (MarkupString)$"Unfortunately the Message Template Record could not be deleted successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = null;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"No Message Template Selected";
                    msgError = (MarkupString)$"Please select a message template first before pressing the Delete button or if try to select one again if one had been selected.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }
            }
            else
            {
                action = "Error";
                soundEffect = SoundFunctions.GetErrorSound();

                msgErrorTitle = $"Cannot Save Message Template Record";
                msgError = (MarkupString)$"Unfortunately the Message Template Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "MessageTemplate", selectedRecord?.MessageTemplateID.ToString() ?? "0");
        }
    }

    private void CancelMainRecordConfirm()
    {
        action = "CancelMainRecordConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        string? numberOfChanges = $"{selectedRecordChanges?.Count} {(selectedRecordChanges?.Count == 1 ? "Change" : "Changes")}";
        string? listOfChanges = selectedRecordChanges?.Select(x => $"<li>{x.Key}: {x.Value}</li>").Aggregate((x, y) => $"{x}{y}"); //Aggregation in case of duplication

        msgConfirmTitle = $"Confirm Cancel?";
        msgConfirm = (MarkupString)$@"
            <p>
                You have made the following changes:<br />
                - MessageTemplate: {numberOfChanges}:
                <ul>
                    {listOfChanges}
                </ul>
            </p>
            <p>
                Are you sure you want to cancel and lose these changes?  
            </p>";

        modalConfirm!.OpenOnTop1();
    }

    private void CancelMainRecord()
    {
        CloseMainRecord();
    }

    private void CloseMainRecord()
    {
        modalMessageTemplate!.Close();
        modalConfirm!.Close();

        selectedRecordChanges?.Clear();
    }

    private void HandleJsonException(HttpRequestException ex, string objectName, string objectID)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";

            //Redirect to login screen
            NavManager.NavigateTo($"Login/Vehicles");
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" is not found";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" resulted in an invalid request";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
