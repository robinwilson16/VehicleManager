@using VehicleManager.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using VehicleManager.Shared

@typeparam TItem

<div class="row">
    <div class="col-md TableArea pt-3 rounded">
        <div class="alert alert-primary" role="alert">
            @* @if (filterMainValues.Count > 0)
            {
                <button type="button" class="btn btn-primary btn-sm me-3" @onclick="@RemoveFilters">Filters (Clear) <i class="fa-solid fa-filter-circle-xmark"></i></button>

                int filterNumber = 0;
                @foreach (var filter in filterMainValues)
                {
                    string filterName = filter.Key;
                    string filterValue = filter.Value?.ToString() ?? string.Empty;

                    filterNumber += 1;

                    @if (filterNumber > 1)
                    {
                        <span class="ps-1 pe-1">, </span>
                    }
                    <kbd><i class="fa-solid fa-filter"></i> @filterName = @filterValue</kbd>
                }
            } *@
        </div>
        <div class="TableContainer">
            <div class="table-responsive">
                <QuickGrid Items="@Items" Virtualize="true" Class="table table-striped table-hover table-bordered" TGridItem="TItem">
                    @if (Items != null)
                    {

                        int tableRow = 0;
                        int? recordID = 0;
                        foreach (var prop in typeof(TItem).GetProperties())
                        {
                            if (ExcludeFields != null && ExcludeFields.Contains(prop.Name))
                            {
                                //Skip fields set to be excluded
                                continue;
                            }
                            tableRow++;

                            if (tableRow == 1) 
                            {
                                <TemplateColumn Title="" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        @{
                                            recordID = (int?)(context?.GetType().GetProperty(prop.Name)?.GetValue(context) ?? 0);
                                        }
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => EditItem((int?)(context?.GetType().GetProperty(prop.Name)?.GetValue(context)) ?? 0)"><i class="fa-solid fa-up-right-from-square"></i></button>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="number" class="form-control" placeholder="Enter Number..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }

                            if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
                            {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @string.Format("{0:dd/MM/yyyy}", context?.GetType().GetProperty(prop.Name)?.GetValue(context))
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="date" class="form-control" placeholder="Enter Date..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType == typeof(bool) || prop.PropertyType == typeof(bool?))
                            {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            <div class="col-justify-start text-center">
                                                <i class="@CSSFunctions.BoolCSS((bool?)context?.GetType().GetProperty(prop.Name)?.GetValue(context))"></i>
                                            </div>
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <button type="button" class="btn "btn-primary"> 
                                                <i class="fa-regular fa-square-minus"></i>
                                            </button>
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                            {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @context?.GetType().GetProperty(prop.Name)?.GetValue(context)
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="number" class="form-control" placeholder="Enter Number..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType == typeof(decimal) || prop.PropertyType == typeof(decimal?) && ModelFunctions.GetDisplayGroup(prop) != null)
                            {
                                //Formats amount offered in red or green depending on if it is accepted
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            <div class="col-justify-start text-center">
                                                <h5 class="pt-1 pb-0 mb-0">
                                                    <span class="badge @(ModelFunctions.GetIsTrue(context, ModelFunctions.GetDisplayGroup(prop)) == true ? "text-bg-success" : "text-bg-danger")">
                                                        @string.Format("{0:C0}", context?.GetType().GetProperty(prop.Name)?.GetValue(context))
                                                    </span>
                                                </h5>
                                            </div>
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="number" class="form-control" placeholder="Enter Number..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType == typeof(decimal) || prop.PropertyType == typeof(decimal?))
                            {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @string.Format("{0:C0}", context?.GetType().GetProperty(prop.Name)?.GetValue(context))
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="number" class="form-control" placeholder="Enter Number..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType.IsEnum || ModelFunctions.IsNullableEnum(prop.PropertyType))
                            {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @(((Enum?)context?.GetType().GetProperty(prop.Name)?.GetValue(context)).GetEnumDisplayName())
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <select class="form-select" autofocus>
                                                <option value="">-- Please Select --</option>
                                                @{
                                                    var subType = Nullable.GetUnderlyingType(prop.PropertyType);

                                                    if (subType != null && subType.IsEnum)
                                                    {
                                                        var enums = Enum.GetValues(subType);

                                                        if (enums != null)
                                                        {
                                                            foreach (Enum enumItem in enums)
                                                            {
                                                                <option value="@enumItem">@enumItem.GetEnumDisplayName()</option>
                                                            }
                                                        }
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType == typeof(Guid) || prop.PropertyType == typeof(Guid?))
                            {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @(context?.GetType().GetProperty(prop.Name)?.GetValue(context) ?? "")
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="text" class="form-control" placeholder="Enter Number..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else if (prop.PropertyType.IsClass && prop.PropertyType != typeof(string))
                            {
                                // Handle complex types (other objects)
                                string? sortProperty = $"{prop.Name}.Name";
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetNestedSortExpression<TItem>(sortProperty))">
                                    <ChildContent>
                                        @{
                                            var complexTypeValue = context?.GetType().GetProperty(prop.Name)?.GetValue(context);
                                            var namePropertyValue = complexTypeValue?.GetType().GetProperty("Name")?.GetValue(complexTypeValue);

                                        }
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @namePropertyValue
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @sortProperty
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <select class="form-select" autofocus>
                                                <option value="">-- Please Select --</option>
                                                @{
                                                    var options = DropDownValues.Where(x => x?.GetType() == prop.PropertyType);
                                                }
                                                @if (options != null)
                                                {
                                                    foreach (var option in options)
                                                    {
                                                        <option value="@option?.GetType().GetProperties().FirstOrDefault()?.GetValue(option)">@option?.GetType().GetProperty("Name")?.GetValue(option)</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                            else {
                                <TemplateColumn Title="@ModelFunctions.GetDisplayName(prop)" Sortable="true" SortBy="GridSort<TItem>.ByAscending(GridSortHelper.GetSortExpression<TItem>(prop.Name))">
                                    <ChildContent>
                                        <div @onclick="() => SelectItem((int?)(context?.GetType().GetProperties().FirstOrDefault()?.GetValue(context)) ?? 0)" class="@TableCSS(recordID)">
                                            @context?.GetType().GetProperty(prop.Name)?.GetValue(context)
                                        </div>
                                    </ChildContent>
                                    <ColumnOptions>
                                        <div class="search-box">
                                            @prop.Name.GetFieldNameWithSpaces(true):
                                            <input type="text" class="form-control" placeholder="Enter Text..." autofocus />
                                        </div>
                                    </ColumnOptions>
                                </TemplateColumn>
                            }
                        }
                    }
                </QuickGrid>
            </div>
        </div>
        <div class="alert alert-secondary" role="alert">
            <div class="row">
                <div class="col-md">
                    <div class="d-grid gap-2 d-md-block text-start">
                        <button type="button" class="btn btn-primary me-md-3" @onclick="()=>EditItem(null)"><i class="fa-solid fa-square-plus"></i> New...</button>
                        <button type="button" class="btn btn-danger me-md-3" @onclick="DeleteItem" disabled="@(SelectedItemID == null ? true : false)"><i class="fa-solid fa-trash-can"></i> Delete...</button>
                        @if (SelectedItemID > 0)
                        {
                            <span>1 Record Selected</span>
                        }
                    </div>
                </div>
                <div class="col-md text-end">

                    @* @if (filterMainValues.Count > 0)
                    {
                        <div class="col-md text-end fw-bold text-primary">
                            @Items?.Count() Records (Filtered)
                        </div>
                    }
                    else
                    { *@
                        <div class="col-md text-end">
                            @Items?.Count() Records
                        </div>
                    @* } *@

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public string? SortField = "SubmissionID";

    [Parameter]
    public IQueryable<TItem>? Items { get; set; }

    [Parameter]
    public IList<string>? ExcludeFields { get; set; }

    [Parameter]
    public int? SelectedItemID { get; set; }

    [Parameter]
    public EventCallback<int?> OnSelectItem { get; set; }

    [Parameter]
    public EventCallback<int?> OnEditItem { get; set; }

    [Parameter]
    public EventCallback<int?> OnDeleteItem { get; set; }

    public string TableCSS(int? recordID)
    {
        string css = "";
        if (recordID == SelectedItemID)
        {
            css = "SelectedRow";
        }
        else if (false != true)
        {
            css = "ErrorRow";
        }

        return css;
    }

    private async Task SelectItem(int? itemID)
    {
        if (itemID != null)
        {
            await OnSelectItem.InvokeAsync(itemID);
        }
    }

    private async Task EditItem(int? itemID)
    {
        if (itemID != null)
        {
            await OnEditItem.InvokeAsync(itemID);
        }
    }

    private async Task DeleteItem()
    {
        await OnDeleteItem.InvokeAsync();
    }

    private IList<object?> DropDownValues = new List<object?>
    {
        new MessageTemplateModel { MessageTemplateID = 1, Name = "First" },
        new MessageTemplateModel { MessageTemplateID = 2, Name = "Second" },
        new MessageTemplateModel { MessageTemplateID = 3, Name = "Third" },
        new MessageModel { MessageID = 12, Subject = "Subject 2 Here" },
        new MessageTemplateModel { MessageTemplateID = 7, Name = "Forth" },
        new MessageTemplateModel { MessageTemplateID = 11, Name = "Fifth" },
        new MessageModel { MessageID = 11, Subject = "Subject Here" },
    };
}