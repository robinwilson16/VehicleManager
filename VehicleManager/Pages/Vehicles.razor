@page "/Vehicles"
@page "/Vehicles/{VehicleID}"

@using VehicleManager.Models
@using VehicleManager.Services
@using VehicleManager.Shared
@using VehicleManager.Components
@using System.Net
@using Microsoft.AspNetCore.Components.QuickGrid
@using TinyMCE.Blazor
@using System.Globalization
@using System.Reflection
@using System.Linq.Expressions

@inject HttpClient Http
@inject IConfiguration configuration
@inject NavigationManager NavManager
@inject ILogger<MessageModel> Logger
@inject AppData appData
@inject IJSRuntime JSRuntime

<PageTitle>Vehicles @@ Broken Motor</PageTitle>

<audio src="@soundEffect" autoplay></audio>

<Modal @ref="modalInfo">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        @msgInfo
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalInfo!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalError!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null)
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalConfirm!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<Modal @ref="modalFormat">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalFormat!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-palette"></i> Formatting Options for @selectedDatabaseField</Title>
    <Body>
        @{
            Type? propertyType = ModelFunctions.GetPropertyTypeFromModelAndNameDataTag(selectedDatabaseField);
        }
        <div class="bd-callout bd-callout-primary bd-callout-grey GreyBackground">
            <div class="container">
                <div class="row g-3 mb-3">
                    <div class="col-md">
                        <div class="row">
                            <div class="col-md">
                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Add With Format</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa-solid fa-palette"></i></span>
                                    <InputSelect @bind-Value="selectedDatabaseFieldFormatted" class="form-select">
                                        <option value="">-- Please Select --</option>
                                        <option value="@selectedDatabaseField">No Format</option>

                                        @if (propertyType == typeof(DateTime) || propertyType == typeof(DateTime?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd/MM/yyyy>")">Short Date (dd/MM/yyyy)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd/MM/yyyy HH:mm>")">Short Date and Time (dd/MM/yyyy HH:mm)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd/MM/yyyy HH:mm:ss>")">Short Date and Time with Seconds (dd/MM/yyyy HH:mm:ss)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd MMMM yyyy>")">Long Date (dd MMMM yyyy)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd MMMM yyyy HH:mm>")">Long Date and Time (dd MMMM yyyy HH:mm)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dd MMMM yyyy HH:mm:ss>")">Long Date and Time with Seconds (dd MMMM yyyy HH:mm:ss)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:HH:mm>")">Time (HH:mm)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:HH:mm:ss>")">Time with Seconds (HH:mm:ss)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:d>")">Day of Month (d)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:dddd>")">Day of Week (dddd)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:ddd>")">Day of Week Short (ddd)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:MMMM>")">Month of Year (MMMM)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:yyyy>")">Year (yyyy)</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:yyyy-MM-dd>")">Year, Month, Day (yyyy-MM-dd)</option>
                                        }
                                        else if (propertyType == typeof(int) || propertyType == typeof(int?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N0>")">1,000</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:C0>")">&pound;0</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P0>")">0.%</option>
                                        }
                                        else if (propertyType == typeof(decimal) || propertyType == typeof(decimal?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N0>")">1,000</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N1>")">1,000.0</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:N2>")">1,000.00</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:C0>")">&pound;0</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:C2>")">&pound;0.00</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P0>")">0.%</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P1>")">0.0%</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:P2>")">0.00%</option>
                                        }
                                        else if (propertyType == typeof(bool) || propertyType == typeof(bool?))
                                        {
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:True/False>")">True/False</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:Y/N>")">Y/N</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:Yes/No>")">Yes/No</option>
                                            <option value="@selectedDatabaseField?.Replace(">",",Format:1/0>")">1/0</option>
                                        }

                                    </InputSelect>
                                    <button class="btn btn-outline-primary" type="button" @onclick="InsertDatabaseFieldWithFormat"><i class="fa-solid fa-square-plus"></i> Add Selected Field</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalFormat!.Close()">Close</button>
    </Footer>
</Modal>

<h3><i class="fa-solid fa-car-burst"></i> Vehicles</h3>

@if (loadDataErrorMsg != null) 
{
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="alert alert-danger hstack gap-3" role="alert">
                    <div>
                        <h1><i class="fa-solid fa-triangle-exclamation"></i></h1>
                    </div>
                    <div>
                        <p>
                            @loadDataErrorMsg
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (mainRecords == null)
{
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="alert alert-primary text-center" role="alert">
                    <h1>
                        <i class="fa-solid fa-spinner fa-spin"></i> Loading ...
                    </h1>
                </div>
            </div>
        </div>
    </div>
}
else {
    <div class="container-fluid">
        @{
            IList<string> ExcludeMainFields = new List<string> { "SubmissionDate", "SubmissionCount", "Surname", "Forename", "Message", "Customer", "BodyStyle", "FuelType", "TransmissionType", "EngineSizeCC", "Category", "DoorCount", "GearCount", "DriveAxle", "EngineCode", "EngineCylinderCount", "EngineSizeLitre", "WheelbaseMM" };
            string? DisabledItemFieldName = null;
            string? ErrorItemFieldName = null;
        }
        <Grid Items="ItemsMain"
        ExcludeFields="ExcludeMainFields"
        FilterFields="FilterFieldsMain"
        DisabledItemFieldName="@DisabledItemFieldName"
        ErrorItemFieldName="@ErrorItemFieldName"
        DropDownValues="DropDownValues"
        SelectedItemID="selectedRecord?.SubmissionID" 
        OnSelectItem="SelectMainRecord" 
        OnEditItem="EditMainRecord" 
        OnDeleteItem="DeleteMainRecordConfirm"
        OnRemoveFilters="RemoveFiltersMain"
        OnRemoveLastFilter="RemoveLastFilterMain"
        OnRemoveFilter="RemoveFilterMain"
        OnShowFilterHelp="ShowFilterHelpMain"
        OnChangeFilter="ChangeFilterMainFromComponent"/>

    </div>

    <Modal @ref="modalMainRecord">
        <WindowControls>
            @if (selectedRecordChanges?.Count > 0)
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelMainRecordConfirm"></button>
            }
            else
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalMainRecord!.Close()"></button>
            }
        </WindowControls>
        <Title>
            @if (@selectedRecordCopy?.SubmissionID > 0)
            {
                @:<i class="fa-solid fa-car"></i> Vehicle @selectedRecordCopy?.SubmissionID
            }
            else {
                @:<i class="fa-solid fa-car"></i> New Vehicle
            }
        </Title>
        <Body>
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="customer-tab" data-bs-toggle="tab" data-bs-target="#customer-tab-pane" type="button" role="tab" aria-controls="customer-tab-pane" aria-selected="true"><i class="fa-solid fa-user"></i> Customer</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="vehicle-tab" data-bs-toggle="tab" data-bs-target="#vehicle-tab-pane" type="button" role="tab" aria-controls="vehicle-tab-pane" aria-selected="false"><i class="fa-solid fa-car"></i> Vehicle</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="messages-tab" data-bs-toggle="tab" data-bs-target="#messages-tab-pane" type="button" role="tab" aria-controls="messages-tab-pane" aria-selected="false"><i class="fa-solid fa-envelope"></i> Messages</button>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="customer-tab-pane" role="tabpanel" aria-labelledby="customer-tab" tabindex="0">
                    <EditForm EditContext="@EditContextMain" OnValidSubmit="() => SaveMainRecord(true)">
                        <FluentValidationValidator @ref="_fluentValidationValidatorMain" />
                        <div class="bd-callout bd-callout-VM bd-callout-grey GreyBackground">
                            <div class="container">
                                <div class="row mb-3 align-items-center">
                                    <div class="col-md text-center">
                                        <h4><i class="fa-solid fa-user"></i> Customer Details</h4>
                                    </div>
                                </div>

                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Forename
                                            </div>
                                            <div class="col-md-8 Text">
                                                <strong>@selectedRecord?.Forename</strong>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Surname
                                            </div>
                                            <div class="col-md-8 Text">
                                                <strong>@selectedRecord?.Surname</strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Email
                                            </div>
                                            <div class="col-md-8 Text">
                                                @selectedRecord?.Email
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Telephone
                                            </div>
                                            <div class="col-md-8 Text">
                                                @selectedRecord?.Tel
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Registration Number
                                            </div>
                                            <div class="col-md-8 Text">
                                                @selectedRecord?.RegistrationNumber
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Post Code
                                            </div>
                                            <div class="col-md-8 Text">
                                                @selectedRecord?.PostCode
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row align-items-center">
                                    <div class="col-md mb-1">
                                        Message
                                    </div>
                                </div>
                                <div class="row align-items-center">
                                    <div class="col-md">
                                        <div class="Textarea">
                                            @selectedRecord?.Message
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-secondary" role="alert">
                            <h4 class="alert-heading">Send Message</h4>
                            <div class="row">
                                <div class="col-md">
                                    <button type="button" class="btn btn-secondary btn-sm" @onclick="() => EditMessageRecordFavourite(1)"><i class="fa-solid fa-road"></i> Initial Email</button>
                                    <button type="button" class="btn btn-warning btn-sm" @onclick="() => EditMessageRecordFavourite(2)"><i class="fa-solid fa-person-running"></i> Follow Up</button>
                                    <button type="button" class="btn btn-success btn-sm" @onclick="() => EditMessageRecordFavourite(3)"><i class="fa-solid fa-hand-holding-dollar"></i> First Accept</button>
                                    <button type="button" class="btn btn-dark btn-sm" @onclick="() => EditMessageRecordFavourite(4)"><i class="fa-solid fa-piggy-bank"></i> Second Offer</button>
                                    <button type="button" class="btn btn-success btn-sm" @onclick="() => EditMessageRecordFavourite(5)"><i class="fa-solid fa-check-double"></i> Second Accept</button>
                                    <button type="button" class="btn btn-info btn-sm" @onclick="() => EditMessageRecordFavourite(6)"><i class="fa-solid fa-comment-dots"></i> Add Review</button>
                                </div>
                            </div>
                        </div>

                        <div class="bd-callout bd-callout-warning bd-callout-grey GreyBackground">
                            <div class="container">
                                <div class="row mb-3 align-items-center">
                                    <div class="col-md text-center">
                                        <h4><i class="fa-solid fa-scale-balanced"></i> Offer Details</h4>
                                    </div>
                                </div>

                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Has Accepted Offer
                                            </div>
                                            <div class="col-md-8 Text @(HasAcceptedOffer == true? "TextYes" : "TextNo")">
                                                <strong>@(HasAcceptedOffer == true ? "Yes" : "No")</strong>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Last Offer Amount
                                            </div>
                                            <div class="col-md-8 Text">
                                                <strong>@(LastOfferAmount?.Format("C0") ?? "£0")</strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Last Contacted
                                            </div>
                                            <div class="col-md-8 Text">
                                                @(LastContacted?.Format("dd/MM/yyyy") ?? "Never")
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="row mb-3 align-items-center">
                                            <div class="col-md-4">
                                                Messages Sent
                                            </div>
                                            <div class="col-md-8 Text">
                                                @MessagesSent
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="tab-pane fade" id="vehicle-tab-pane" role="tabpanel" aria-labelledby="vehicle-tab" tabindex="0">
                    <div class="bd-callout bd-callout-purple bd-callout-grey GreyBackground">
                        <div class="container">
                            <div class="row mb-3 align-items-center">
                                <div class="col-md text-center">
                                    <h4><i class="fa-solid fa-car"></i> Vehicle Details</h4>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Registration Number
                                        </div>
                                        <div class="col-md-8 Text">
                                            <strong>@selectedRecord?.RegistrationNumber</strong>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Year of Manufacture
                                        </div>
                                        <div class="col-md-8 Text">
                                            <strong>@selectedRecord?.YearOfManufacture</strong>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Make
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.Make
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Model
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.Model
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Description
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.Description
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Derivative
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.Derivative
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Colour
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.Colour
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Body Style
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.BodyStyle
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Fuel Type
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.FuelType
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Transmission Type
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.TransmissionType
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Engine Size CC
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.EngineSizeCC
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Category
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.Category
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Door Count
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.DoorCount
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Gear Count
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.GearCount
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Drive Axle
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.DriveAxle
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            EngineCode
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.EngineCode
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Engine Cylinder Count
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.EngineCylinderCount
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Engine Size Litre
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.EngineSizeLitre
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-md-4">
                                            Wheelbase MM
                                        </div>
                                        <div class="col-md-8 Text">
                                            @selectedRecord?.WheelbaseMM
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="messages-tab-pane" role="tabpanel" aria-labelledby="messages-tab" tabindex="0">
                    @{
                        IList<string> ExcludeMessageFields = new List<string> { "MessageGUID", "SubjectProcessed", "Message", "MessageProcessed", "MessageIsHTML", "CC", "BCC" };
                        string? DisabledMessageFieldName = null;
                        string? ErrorMessageFieldName = "IsSent";
                    }
                    <Grid Items="ItemsMessages"
                    ExcludeFields="ExcludeMessageFields"
                    FilterFields="FilterFieldsMessage"
                    DisabledItemFieldName="@DisabledMessageFieldName"
                    ErrorItemFieldName="@ErrorMessageFieldName"
                    DropDownValues="DropDownValues"
                    SelectedItemID="selectedMessageRecord?.MessageID"
                    OnSelectItem="SelectMessageRecord"
                    OnEditItem="EditMessageRecord"
                    OnDeleteItem="DeleteMessageRecordConfirm"
                    OnRemoveFilters="RemoveFiltersMessage"
                    OnRemoveLastFilter="RemoveLastFilterMessage"
                    OnRemoveFilter="RemoveFilterMessage"
                    OnShowFilterHelp="ShowFilterHelpMain"
                    OnChangeFilter="ChangeFilterMessageFromComponent" />
                </div>
            </div>
        </Body>
        <Footer>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(-1)"><i class="fa-solid fa-square-caret-left"></i></button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMainRecord(1)"><i class="fa-solid fa-square-caret-right"></i></button>

            @if (selectedRecordChanges?.Count > 0)
            {
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(true)"><i class="fa-solid fa-floppy-disk"></i> Save and Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => SaveMainRecord(false)"><i class="fa-solid fa-floppy-disk"></i> Save</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="CancelMainRecordConfirm"><i class="fa-solid fa-rotate-left"></i> Cancel <strong>@(selectedRecordChanges?.Count ?? 1)</strong> Changes</button>
            }
            else
            {
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseMainRecord"><i class="fa-solid fa-rotate-left"></i> Close</button>
            }
        </Footer>
    </Modal>

    <Modal @ref="modalMessageRecord">
        <WindowControls>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalMessageRecord!.Close()"></button>
        </WindowControls>
        <Title>

            @if (selectedMessageRecordCopy?.MessageID > 0)
            {
                @if (messages?.Count > 0) 
                {
                    <i class="fa-solid fa-reply"></i>
                }
                else 
                {
                    <i class="fa-solid fa-envelope-open"></i>
                } 
                <span>&nbsp;@selectedMessageRecordCopy!.Subject</span>
            }
            else 
            {
                <i class="fa-solid fa-envelope-open-text"></i>
                <span>New Message to @selectedRecordCopy?.Forename @selectedRecordCopy?.Surname about @selectedRecordCopy?.Colour @selectedRecordCopy?.Make (@selectedRecordCopy?.RegistrationNumber)</span>
            }

        </Title>
        <Body>
            <EditForm EditContext="@Messages?.EditContextMain" OnValidSubmit="() => SaveMessageRecord(true)">
                <FluentValidationValidator @ref="Messages._fluentValidationValidator" />
                <div class="bd-callout bd-callout-primary bd-callout-grey GreyBackground">
                    <div class="container">
                        <div class="row">
                            <div class="col-md">

                                <div class="row g-3 mb-3">
                                    <div class="col-md">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> To</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputText @bind-Value="selectedMessageRecordCopy!.ToName" class="form-control" placeholder="Name" />
                                                <ValidationMessage For="@(() => selectedMessageRecordCopy!.ToName)" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md">
                                        <InputText @bind-Value="selectedMessageRecordCopy!.To" class="form-control" placeholder="Email" />
                                        <ValidationMessage For="@(() => selectedMessageRecordCopy!.To)" />
                                    </div>
                                </div>

                                <div class="row g-3 mb-3">
                                    <div class="col-md">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> <i class="fa-solid fa-sterling-sign"></i> Offered</label>
                                            </div>
                                            <div class="col-md-8">
                                                <InputNumber @bind-Value="selectedMessageRecordCopy!.AmountOffered" class="form-control" />
                                                <ValidationMessage For="@(() => selectedMessageRecordCopy!.AmountOffered)" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Accepted?</label>
                                            </div>
                                            <div class="col-md-8">
                                                <div class="d-grid gap-2 d-md-block">
                                                    <button type="button" class="btn @(selectedMessageRecordCopy!.IsAccepted == true? "btn-primary" : "btn-outline-primary") me-md-3" @onclick="(e) => ToggleMessageRecordIsAccepted()"><i class="@(selectedMessageRecordCopy!.IsAccepted == true? "fa-solid fa-square-check" : "fa-regular fa-square")"></i></button>
                                                </div>
                                                <ValidationMessage For="@(() => selectedMessageRecordCopy!.IsAccepted)" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row g-3 mb-3">
                                    <div class="col-md-2">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Template</label>
                                    </div>
                                    <div class="col-md-10">
                                        @if (selectedMessageRecordCopy!.MessageTemplate == null)
                                        {
                                            selectedMessageRecordCopy!.MessageTemplate = new MessageTemplateModel();
                                        }

                                        <InputSelect @bind-Value="selectedMessageRecordCopy!.MessageTemplate!.MessageTemplateID" class="form-select" @bind-Value:after="() => LoadMessageTemplate(true)">
                                            <option value="">-- Please Select --</option>
                                            @if (messageTemplates != null)
                                            {
                                                foreach (var template in messageTemplates)
                                                {
                                                    <option value="@template.MessageTemplateID">@template.Name</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => selectedMessageRecordCopy!.MessageTemplate.MessageTemplateID)" />

                                    </div>
                                </div>

                                <div class="row g-3 mb-3">
                                    <div class="col-md-2">
                                        <label class="col-form-label"><i class="fa-solid fa-angles-right"></i> Subject</label>
                                    </div>
                                    <div class="col-md-10">
                                        <InputText id="subjectInput" @bind-Value="selectedMessageRecordCopy!.Subject" class="form-control" onblur="@{() => @SetFocus("Subject")}" />
                                        <ValidationMessage For="@(() => selectedMessageRecordCopy!.Subject)" />
                                    </div>
                                </div>

                                <div class="row g-3 mb-3">
                                    <div class="col-md">
                                        <div class="accordion" id="AddDatabaseField">
                                            <div class="accordion-item">
                                                <h2 class="accordion-header">
                                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                                        Add Database Field
                                                    </button>
                                                </h2>
                                                <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                                    <div class="accordion-body">
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fa-solid fa-database"></i></span>
                                                            <InputSelect @bind-Value="selectedDatabaseField" class="form-select">
                                                                <option value="">-- Please Select --</option>

                                                                @if (messageFields != null)
                                                                {
                                                                    foreach (var property in messageFields.GetType().GetProperties().OrderBy(p => p.Name))
                                                                    {
                                                                        string? optionValue = $"<data:Message.{property.Name}>";
                                                                        <option value="@optionValue">@optionValue</option>
                                                                    }
                                                                }
                                                                @if (vehicleFields != null)
                                                                {
                                                                    foreach (var property in vehicleFields.GetType().GetProperties().OrderBy(p => p.Name))
                                                                    {
                                                                        string? optionValue = $"<data:Vehicle.{property.Name}>";
                                                                        <option value="@optionValue">@optionValue</option>
                                                                    }
                                                                }

                                                            </InputSelect>
                                                            <button class="btn btn-outline-primary" type="button" @onclick="InsertDatabaseField"><i class="fa-solid fa-square-plus"></i> Add Selected Field</button>
                                                            <button class="btn btn-outline-primary" type="button" @onclick="InsertDatabaseFieldFromFormat"><i class="fa-solid fa-palette"></i> Add With Format...</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row g-3 mb-3">
                                    <div class="col-md">
                                        Message
                                    </div>
                                </div>
                                <div class="row g-3 mb-3">
                                    <div class="col-md">
                                        <Editor @bind-Value="selectedMessageRecordCopy!.Message" Field="() => selectedMessageRecordCopy!.Message" LicenseKey="gpl" />
                                        @* <InputTextArea @bind-Value="selectedMessageRecordCopy!.Message" class="form-control" /> *@
                                        <ValidationMessage For="@(() => selectedMessageRecordCopy!.Message)" />
                                    </div>
                                </div>

                                @if (messagePreview != null)
                                {
                                    <div class="row g-3 mb-3">
                                        <div class="col-md">
                                            Message Preview
                                        </div>
                                    </div>
                                    <div class="row g-3 mb-3">
                                        <div class="col-md">
                                            <div class="Textarea">
                                                @messagePreview
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (selectedMessageRecordCopy?.CreatedDate != null)
                                {
                                <div class="row g-3 mb-3 CreatedBy">
                                    <div class="col-md text-secondary">
                                        Created by @selectedMessageRecordCopy?.CreatedBy on @selectedMessageRecordCopy?.CreatedDate
                                    </div>

                                    @if (selectedMessageRecordCopy?.LastModifiedDate != null)
                                    {
                                        <div class="col-md text-secondary text-end">
                                            Last modified by @selectedMessageRecordCopy?.LastModifiedBy on @selectedMessageRecordCopy?.LastModifiedDate
                                        </div>
                                    }

                                </div>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Body>
        <Footer>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMessageRecord(-1)"><i class="fa-solid fa-square-caret-left"></i></button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => AdvanceToMessageRecord(1)"><i class="fa-solid fa-square-caret-right"></i></button>
            <button type="button" class="btn btn-info" data-bs-dismiss="modal" @onclick="() => PreviewMessage()"><i class="fa-solid fa-magnifying-glass"></i> Preview</button>
            <button type="button" class="btn btn-info" data-bs-dismiss="modal" @onclick="() => SendMessage(true)" disabled="@(selectedMessageRecordCopy?.MessageProcessed == null ? true : false)"><i class="fa-solid fa-paper-plane"></i> Send</button>

            @if (selectedMessageRecordChanges?.Count > 0)
            {
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="() => SaveMessageRecord(true)"><i class="fa-solid fa-floppy-disk"></i> Save and Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => SaveMessageRecord(false)"><i class="fa-solid fa-floppy-disk"></i> Save</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="CancelMessageRecordConfirm"><i class="fa-solid fa-rotate-left"></i> Cancel <strong>@(selectedMessageRecordChanges?.Count ?? 1)</strong> Changes</button>
            }
            else
            {
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseMessageRecord"><i class="fa-solid fa-rotate-left"></i> Close</button>
            }
        </Footer>
    </Modal>

    <Messages @ref="Messages" HideContent=true selectedRecord="selectedMessageRecord" selectedRecordCopy="selectedMessageRecordCopy" />
}

@code {
    [Parameter]
    public int? VehicleID { get; set; }

    public int? MessageID { get; set; }

    public EditContext? EditContextMain { get; set; }
    public EditContext? EditContextMessage { get; set; }
    private FluentValidationValidator? _fluentValidationValidatorMain;
    private FluentValidationValidator? _fluentValidationValidatorMessage;

    private Messages? Messages = new Messages();
    private MarkupString? messagePreview { get; set; }

    private string? vehicleEndPoint;
    private string? messageEndPoint;

    private IList<Func<VehicleModel, bool>> filtersMain = new List<Func<VehicleModel, bool>>();

    private IQueryable<VehicleModel>? ItemsMain =>
        mainRecords?.AsQueryable().Where(m => filtersMain.All(filter => filter(m)));

    private void AddFilterMain(Func<VehicleModel, bool> filter)
    {
        filtersMain.Add(filter);
    }

    private void RemoveFilterMain(Func<VehicleModel, bool> filter)
    {
        filtersMain.Remove(filter);
    }

    private List<VehicleModel>? mainRecords { get; set; }

    [SupplyParameterFromForm]
    public VehicleModel? selectedRecord { get; set; } = new VehicleModel();
    private VehicleModel? selectedRecordCopy { get; set; } = new VehicleModel();

    private CustomerModel? customerFields = new CustomerModel();
    private MessageModel? messageFields = new MessageModel();
    private VehicleModel? vehicleFields = new VehicleModel();

    private string? selectedDatabaseField { get; set; }
    private string? selectedDatabaseFieldFormatted { get; set; }

    //Related datasets
    private List<MessageModel>? messages { get; set; }
    private List<MessageTemplateModel>? messageTemplates { get; set; }

    private IList<Func<MessageModel, bool>> filtersMessage = new List<Func<MessageModel, bool>>();

    private IQueryable<MessageModel>? ItemsMessages =>
        messages?.AsQueryable().Where(m => selectedRecord == null? 1 == 1 : m.VehicleID == selectedRecord.SubmissionID && filtersMessage.All(filter => filter(m)));

    public MessageModel? selectedMessageRecord { get; set; } = new MessageModel();
    private MessageModel? selectedMessageRecordCopy { get; set; } = new MessageModel();

    public bool? HasAcceptedOffer { get; set; }
    public decimal? LastOfferAmount { get; set; }
    public DateTime? LastContacted { get; set; }
    public int? MessagesSent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //CheckAuthentication();

        SetEditorContextMain();
        SetEditorContextMessage();

        bool? isError = false;
        vehicleEndPoint = $"{configuration["VehicleEndpoint"]}/FormEntries";
        messageEndPoint = $"{configuration["APIEndpoint"]}/Message";

        try
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", appData.CurrentUser?.Token);
            mainRecords = await Http.GetFromJsonAsync<List<VehicleModel>>(vehicleEndPoint);
        }
        catch (HttpRequestException ex)
        {
            isError = true;
            HandleJsonException(ex, "Vehicle", VehicleID.ToString() ?? "");
        }

        if (isError != true)
        {
            //Load other objects

            try
            {
                messages = await Http.GetFromJsonAsync<List<MessageModel>>(messageEndPoint);
            }
            catch (HttpRequestException ex)
            {
                isError = true;
                HandleJsonException(ex, "Message", VehicleID.ToString() ?? "");
            }
        }

        if (isError != true)
        {
            //Load other objects
            string? messageTemplateEndPoint = $"{configuration["APIEndpoint"]}/MessageTemplate";
            try
            {
                messageTemplates = await Http.GetFromJsonAsync<List<MessageTemplateModel>>(messageTemplateEndPoint);
            }
            catch (HttpRequestException ex)
            {
                isError = true;
                HandleJsonException(ex, "MessageTemplate", MessageID.ToString() ?? "");
            }
        }

        PopulateDropDownValuesMain();
        PopulateDropDownValuesMessage();
    }

    private void CheckAuthentication()
    {
        if (appData?.CurrentUser?.Email == null)
        {
            NavManager.NavigateTo("/Login");
        }
    }

    private VehicleModel? GetMainRecord(int recordID)
    {
        return
        mainRecords?
        .Where(t => t.SubmissionID == recordID)
        .FirstOrDefault();
    }

    private MessageModel? GetMessageRecord(int recordID)
    {
        return
        messages?
        .Where(t => t.MessageID == recordID)
        .FirstOrDefault();
    }

    private void SelectMainRecord(int? recordID)
    {
        if (recordID != null && recordID > 0)
        {
            selectedRecord = GetMainRecord(recordID ?? 0);
        }
        else
        {
            selectedRecord = new VehicleModel();

            //Related Datasets

        }

        //Keep a copy of this object to be used for edit form so original object can remain untouched until save operation (otherwise it changes on screen)
        if (selectedRecord != null)
            selectedRecordCopy = selectedRecord?.Clone();
    }

    private void SelectMessageRecord(int? recordID)
    {
        if (recordID != null && recordID > 0)
        {
            selectedMessageRecord = GetMessageRecord(recordID ?? 0);
        }
        else
        {
            selectedMessageRecord = new MessageModel()
            {
                MessageGUID = Guid.NewGuid(),
                MessageTypeID = MessageType.ToCustomer,
                MessageIsHTML = true,
                VehicleID = selectedRecordCopy?.SubmissionID,
                From = configuration.GetSection("Settings")["EmailAddress"],
                FromName = configuration.GetSection("Settings")["EmailName"],
                To = selectedRecordCopy?.Email,
                ToName = selectedRecordCopy?.Forename + " " + selectedRecordCopy?.Surname ?? selectedRecordCopy?.Email,
                MessageStatusID = MessageStatus.Pending
            };

            //Related Datasets
            MessageTemplateModel blankMessageTemplateModel = new MessageTemplateModel();
            selectedMessageRecord.MessageTemplate = blankMessageTemplateModel;
        }

        //Keep a copy of this object to be used for edit form so original object can remain untouched until save operation (otherwise it changes on screen)
        if (selectedMessageRecord != null)
            selectedMessageRecordCopy = selectedMessageRecord?.Clone();
    }

    public async Task AdvanceToMainRecord(int numRecords)
    {
        if (await SaveMainRecord(false) == true)
        {
            int? currentRecordID = selectedRecord?.SubmissionID;
            VehicleModel? nextRecord = new VehicleModel();

            if (numRecords > 0)
            {
                nextRecord =
                ItemsMain?
                .SkipWhile(obj => obj.SubmissionID != currentRecordID)
                .Skip(numRecords)
                .FirstOrDefault();
            }
            else if (numRecords < 0)
            {
                int numRecordsBack = Math.Abs(numRecords);
                nextRecord =
                    ItemsMain?
                    .Reverse()
                    .SkipWhile(obj => obj.SubmissionID != currentRecordID)
                    .Skip(numRecordsBack)
                    .FirstOrDefault();
            }

            if (nextRecord != null)
            {
                if (nextRecord?.SubmissionID != null)
                {
                    selectedRecord = nextRecord;
                    selectedRecordCopy = nextRecord;
                }
            }
        }
    }

    public async Task AdvanceToMessageRecord(int numRecords)
    {
        if (await SaveMessageRecord(false) == true)
        {
            int? currentRecordID = selectedMessageRecord?.MessageID;
            MessageModel? nextRecord = new MessageModel();

            if (numRecords > 0)
            {
                nextRecord =
                ItemsMessages?
                .SkipWhile(obj => obj.MessageID != currentRecordID)
                .Skip(numRecords)
                .FirstOrDefault();
            }
            else if (numRecords < 0)
            {
                int numRecordsBack = Math.Abs(numRecords);
                nextRecord =
                    ItemsMessages?
                    .Reverse()
                    .SkipWhile(obj => obj.MessageID != currentRecordID)
                    .Skip(numRecordsBack)
                    .FirstOrDefault();
            }

            if (nextRecord != null)
            {
                if (nextRecord?.MessageID != null)
                {
                    selectedMessageRecord = nextRecord;
                    selectedMessageRecordCopy = nextRecord;
                }
            }
        }
    }

    public void PopulateDropDownValuesMain()
    {
        DropDownValues = new List<object?>();


    }

    public void PopulateDropDownValuesMessage()
    {
        DropDownValues = new List<object?>();

        if (messageTemplates != null)
        {
            foreach (var template in messageTemplates)
            {
                DropDownValues.Add(template);
            }
        }
    }

    //Toggles for nullable bools
    public void ToggleMessageRecordIsAccepted()
    {
        if (selectedMessageRecordCopy != null)
        {
            if (selectedMessageRecordCopy.IsAccepted == true)
            {
                selectedMessageRecordCopy.IsAccepted = false;
            }
            else
            {
                selectedMessageRecordCopy.IsAccepted = true;
            }
        }
    }

    private void ChangeFilterMain(string fieldName, object? value)
    {
        if (value == null || string.IsNullOrEmpty(value.ToString()))
        {
            if (FilterFieldsMain != null)
            {
                FilterFieldsMain.Remove(fieldName);
            }
        }
        else
        {
            var property = typeof(VehicleModel).GetProperty(fieldName.Split('.').First());
            if (property != null)
            {
                var targetType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

                object? convertedValue = null;
                Console.WriteLine($"Filter {fieldName} value {value} type {targetType}");

                if (targetType.IsEnum)
                {
                    try
                    {
                        convertedValue = Enum.Parse(targetType, value.ToString()!);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType.IsClass && targetType != typeof(string))
                {
                    try
                    {
                        //convertedValue = int.Parse(value.ToString()!);
                        convertedValue = Convert.ChangeType(value, targetType.GetProperties().FirstOrDefault()?.PropertyType ?? typeof(int));
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType == typeof(bool) || targetType == typeof(bool?))
                {
                    bool? oldValue = null;
                    bool? newValue = null;

                    //Get old and new value to toggle and discard value sent from UI
                    if (FilterFieldsMain == null)
                        FilterFieldsMain = new Dictionary<string, object?>();

                    if (FilterFieldsMain.ContainsKey(fieldName))
                    {
                        if (bool.TryParse(FilterFieldsMain[fieldName]?.ToString(), out bool oldBool))
                        {
                            oldValue = oldBool;
                        }
                    }

                    if (oldValue == null)
                    {
                        newValue = true;
                    }
                    else if (oldValue == true)
                    {
                        newValue = false;
                    }
                    else
                    {
                        newValue = null;

                    }

                    try
                    {
                        convertedValue = newValue;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else
                {
                    try
                    {
                        convertedValue = Convert.ChangeType(value, targetType);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }

                if (fieldName != null)
                {
                    //Allow bools to be set as NULL
                    if (convertedValue != null || !string.IsNullOrEmpty(convertedValue?.ToString()) || targetType == typeof(bool) || targetType == typeof(bool?))
                    {
                        if (FilterFieldsMain == null)
                        {
                            FilterFieldsMain = new Dictionary<string, object?>();
                        }

                        FilterFieldsMain[fieldName] = convertedValue;
                        //Console.WriteLine($"Filter {fieldName} set to {convertedValue}");
                    }

                }
            }
        }

        ApplyFilters();
    }

    private void ChangeFilterMessage(string fieldName, object? value)
    {
        if (value == null || string.IsNullOrEmpty(value.ToString()))
        {
            if (FilterFieldsMessage != null)
            {
                FilterFieldsMessage.Remove(fieldName);
            }
        }
        else
        {
            var property = typeof(MessageModel).GetProperty(fieldName.Split('.').First());
            if (property != null)
            {
                var targetType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

                object? convertedValue = null;
                Console.WriteLine($"Filter {fieldName} value {value} type {targetType}");

                if (targetType.IsEnum)
                {
                    try
                    {
                        convertedValue = Enum.Parse(targetType, value.ToString()!);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType.IsClass && targetType != typeof(string))
                {
                    try
                    {
                        //convertedValue = int.Parse(value.ToString()!);
                        convertedValue = Convert.ChangeType(value, targetType.GetProperties().FirstOrDefault()?.PropertyType ?? typeof(int));
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else if (targetType == typeof(bool) || targetType == typeof(bool?))
                {
                    bool? oldValue = null;
                    bool? newValue = null;

                    //Get old and new value to toggle and discard value sent from UI
                    if (FilterFieldsMessage == null)
                        FilterFieldsMessage = new Dictionary<string, object?>();

                    if (FilterFieldsMessage.ContainsKey(fieldName))
                    {
                        if (bool.TryParse(FilterFieldsMessage[fieldName]?.ToString(), out bool oldBool))
                        {
                            oldValue = oldBool;
                        }
                    }

                    if (oldValue == null)
                    {
                        newValue = true;
                    }
                    else if (oldValue == true)
                    {
                        newValue = false;
                    }
                    else
                    {
                        newValue = null;

                    }

                    try
                    {
                        convertedValue = newValue;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }
                else
                {
                    try
                    {
                        convertedValue = Convert.ChangeType(value, targetType);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error converting value for field {FieldName}", fieldName);
                    }
                }

                if (fieldName != null)
                {
                    //Allow bools to be set as NULL
                    if (convertedValue != null || !string.IsNullOrEmpty(convertedValue?.ToString()) || targetType == typeof(bool) || targetType == typeof(bool?))
                    {
                        if (FilterFieldsMessage == null)
                        {
                            FilterFieldsMessage = new Dictionary<string, object?>();
                        }

                        FilterFieldsMessage[fieldName] = convertedValue;
                        //Console.WriteLine($"Filter {fieldName} set to {convertedValue}");
                    }

                }
            }
        }

        ApplyFiltersMessage();
    }

    private void ApplyFilters()
    {
        filtersMain.Clear();

        if (FilterFieldsMain != null)
        {
            foreach (var filter in FilterFieldsMain)
            {
                var propertyName = filter.Key;
                var propertyValue = filter.Value;
                //Console.WriteLine($"Filter {propertyName} value {propertyValue}");

                var parameter = Expression.Parameter(typeof(VehicleModel), "v");
                Expression property = parameter;
                Expression? parentProperty = null;

                foreach (var member in propertyName.Split('.'))
                {
                    //Do not need a not null check on the object itself
                    if (!property.ToString().Equals("v"))
                        parentProperty = property;

                    property = Expression.Property(property, member);
                }

                var constant = Expression.Constant(propertyValue);

                Expression? comparison = null;

                if (propertyValue is string)
                {
                    var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string), typeof(StringComparison) });
                    var isNotNull = Expression.NotEqual(property, Expression.Constant(null));

                    comparison = Expression.Call(property, containsMethod!, constant, Expression.Constant(StringComparison.CurrentCultureIgnoreCase));
                    comparison = Expression.AndAlso(isNotNull, comparison);
                }
                else if (propertyValue is int || propertyValue is decimal || propertyValue is bool || (propertyValue != null && propertyValue.GetType().IsEnum))
                {
                    if (Nullable.GetUnderlyingType(property.Type) != null)
                    {
                        var hasValue = Expression.Property(property, "HasValue");
                        var value = Expression.Property(property, "Value");
                        var equal = Expression.Equal(value, constant);
                        comparison = Expression.AndAlso(hasValue, equal);
                    }
                    else
                    {
                        comparison = Expression.Equal(property, constant);
                    }
                }
                else if (propertyValue is DateTime)
                {
                    if (Nullable.GetUnderlyingType(property.Type) != null)
                    {
                        var hasValue = Expression.Property(property, "HasValue");
                        var value = Expression.Property(property, "Value");
                        var equal = Expression.Equal(value, constant);
                        comparison = Expression.AndAlso(hasValue, equal);
                    }
                    else
                    {
                        comparison = Expression.Equal(property, constant);
                    }
                }

                if (parentProperty != null)
                {
                    var parentNotNull = Expression.NotEqual(parentProperty, Expression.Constant(null));
                    if (comparison != null)
                        comparison = Expression.AndAlso(parentNotNull, comparison);
                }

                if (comparison != null)
                {
                    var lambda = Expression.Lambda<Func<VehicleModel, bool>>(comparison, parameter);
                    Console.WriteLine(lambda);
                    filtersMain.Add(lambda.Compile());
                }
            }
        }

        // Trigger UI update
        StateHasChanged();
    }

    private void ApplyFiltersMessage()
    {
        filtersMessage.Clear();

        if (FilterFieldsMessage != null)
        {
            foreach (var filter in FilterFieldsMessage)
            {
                var propertyName = filter.Key;
                var propertyValue = filter.Value;
                //Console.WriteLine($"Filter {propertyName} value {propertyValue}");

                var parameter = Expression.Parameter(typeof(MessageModel), "m");
                Expression property = parameter;
                Expression? parentProperty = null;

                foreach (var member in propertyName.Split('.'))
                {
                    //Do not need a not null check on the object itself
                    if (!property.ToString().Equals("m"))
                        parentProperty = property;

                    property = Expression.Property(property, member);
                }

                var constant = Expression.Constant(propertyValue);

                Expression? comparison = null;

                if (propertyValue is string)
                {
                    var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string), typeof(StringComparison) });
                    var isNotNull = Expression.NotEqual(property, Expression.Constant(null));

                    comparison = Expression.Call(property, containsMethod!, constant, Expression.Constant(StringComparison.CurrentCultureIgnoreCase));
                    comparison = Expression.AndAlso(isNotNull, comparison);
                }
                else if (propertyValue is int || propertyValue is decimal || propertyValue is bool || (propertyValue != null && propertyValue.GetType().IsEnum))
                {
                    if (Nullable.GetUnderlyingType(property.Type) != null)
                    {
                        var hasValue = Expression.Property(property, "HasValue");
                        var value = Expression.Property(property, "Value");
                        var equal = Expression.Equal(value, constant);
                        comparison = Expression.AndAlso(hasValue, equal);
                    }
                    else
                    {
                        comparison = Expression.Equal(property, constant);
                    }
                }
                else if (propertyValue is DateTime)
                {
                    if (Nullable.GetUnderlyingType(property.Type) != null)
                    {
                        var hasValue = Expression.Property(property, "HasValue");
                        var value = Expression.Property(property, "Value");
                        var equal = Expression.Equal(value, constant);
                        comparison = Expression.AndAlso(hasValue, equal);
                    }
                    else
                    {
                        comparison = Expression.Equal(property, constant);
                    }
                }

                if (parentProperty != null)
                {
                    var parentNotNull = Expression.NotEqual(parentProperty, Expression.Constant(null));
                    if (comparison != null)
                        comparison = Expression.AndAlso(parentNotNull, comparison);
                }

                if (comparison != null)
                {
                    var lambda = Expression.Lambda<Func<MessageModel, bool>>(comparison, parameter);
                    Console.WriteLine(lambda);
                    filtersMessage.Add(lambda.Compile());
                }
            }
        }

        // Trigger UI update
        StateHasChanged();
    }

    public void SetEditorContextMain()
    {
        //When Edit Form is based on an Edit Context this must be called each time the context changes for validation to work
        if (selectedRecordCopy != null)
            EditContextMain = new EditContext(selectedRecordCopy);

        if (EditContextMain != null)
        {
            EditContextMain.OnFieldChanged += ChangeMainRecord;
        }
    }

    public void SetEditorContextMessage()
    {
        //When Edit Form is based on an Edit Context this must be called each time the context changes for validation to work
        if (selectedMessageRecordCopy != null)
            Messages.EditContextMain = new EditContext(selectedMessageRecordCopy);

        if (Messages.EditContextMain != null)
        {
            Messages.EditContextMain.OnFieldChanged += ChangeMessageRecord;
        }
    }

    public string? action { get; set; }
    public string? soundEffect { get; set; }
    private Modal? modalMainRecord { get; set; }
    private Modal? modalMessageRecord { get; set; }

    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    private Modal? modalFormat { get; set; }

    public string? loadDataErrorMsg = null;

    private IDictionary<string, string>? selectedRecordChanges = new Dictionary<string, string>();
    private IDictionary<string, string>? selectedMessageRecordChanges = new Dictionary<string, string>();

    public Dictionary<string, object?>? FilterFieldsMain { get; set; }

    public Dictionary<string, object?>? FilterFieldsMessage { get; set; }

    public IList<object?>? DropDownValues { get; set; }

    private void ChangeFilterMainFromComponent((string fieldName, object? value) args)
    {
        ChangeFilterMain(args.fieldName, args.value);
        //Console.WriteLine($"Filter {args.fieldName} value {args.value}");
    }

    private void ChangeFilterMessageFromComponent((string fieldName, object? value) args)
    {
        ChangeFilterMessage(args.fieldName, args.value);
        //Console.WriteLine($"Filter {args.fieldName} value {args.value}");
    }

    private void RemoveFiltersMain()
    {
        if (FilterFieldsMain != null)
        {
            FilterFieldsMain.Clear();
        }
        filtersMain.Clear();

        // Trigger UI update
        StateHasChanged();
    }

    private void RemoveFiltersMessage()
    {
        if (FilterFieldsMessage != null)
        {
            FilterFieldsMessage.Clear();
        }
        filtersMessage.Clear();

        // Trigger UI update
        StateHasChanged();
    }

    private void RemoveLastFilterMain()
    {
        if (FilterFieldsMain != null)
        {
            string? lastKey = FilterFieldsMain.Keys.LastOrDefault();

            if (lastKey != null)
            {
                FilterFieldsMain.Remove(lastKey);
            }

            ApplyFilters();
        }
    }

    private void RemoveLastFilterMessage()
    {
        if (FilterFieldsMessage != null)
        {
            string? lastKey = FilterFieldsMessage.Keys.LastOrDefault();

            if (lastKey != null)
            {
                FilterFieldsMessage.Remove(lastKey);
            }

            ApplyFilters();
        }
    }

    private void RemoveFilterMain(string? fieldName)
    {
        if (fieldName != null)
        {
            if (FilterFieldsMain != null)
                FilterFieldsMain.Remove(fieldName);
        }

        ApplyFilters();
    }

    private void RemoveFilterMessage(string? fieldName)
    {
        if (fieldName != null)
        {
            if (FilterFieldsMessage != null)
                FilterFieldsMessage.Remove(fieldName);
        }

        ApplyFilters();
    }

    private void ShowFilterHelpMain()
    {
        action = "Info";
        soundEffect = SoundFunctions.GetPromptSound();

        msgInfoTitle = $"Filtering and Sorting Information";
        msgInfo = (MarkupString)$@"
            <h3><i class=""fa-solid fa-filter""></i> Information on Filtering</h3>
            <p>To filter on a field press the <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-bars""></i></button> button next to the field name in the header and then select or type in your search criteria (depending on the field type).</p>
            <p>Text and numeric fields will show a search box <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-magnifying-glass""></i></button> whereas selection fields will show a drop-down <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-square-caret-down""></i></button> and yes/no fields will show a checkbox <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-square-check""></i></button>.</p>
            <p>Once you have added filters you can clear all these by pressing on the <button type=""button"" class=""btn btn-primary btn-sm"">Clear Filers <i class=""fa-solid fa-filter-circle-xmark""></i></button> button or you can press on the <button type=""button"" class=""btn btn-primary btn-sm"">Clear Last Filter <i class=""fa-solid fa-filter-circle-xmark""></i></button> button to clear the last field you filtered by. These will become visible once you have added your first filter.</p>
            <p>You can also clear individual filters by pressing the <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-filter-circle-xmark""></i></button> button next to each one.</p>
            <h3><i class=""fa-solid fa-arrow-up-a-z""></i> Information on Sorting</h3>
            <p>You can sort a field by clicking on its name in the header row where the first time you press it the column will sort in ascending order <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-arrow-up-a-z""></i></button> and the second time you press it, it will sort in descending order <button type=""button"" class=""btn btn-primary btn-sm""><i class=""fa-solid fa-arrow-down-z-a""></i></button>.</p>
            <p>To sort by a different field just click the header of that column and it will replace the sort you had and sort by the new column instead.</p>";

        modalInfo!.Open();
    }

    private async Task FormAction()
    {
        //Determine what clear form button should do on dialog box

        if (action == "ClearFormConfirm")
        {
            ClearForm();
        }
        else if (action == "CancelMainRecordConfirm")
        {
            CancelMainRecord();
        }
        else if (action == "DeleteMainRecordConfirm")
        {
            await DeleteMainRecord();
        }
        else if (action == "ClearMessageFormConfirm")
        {
            ClearMessageForm();
        }
        else if (action == "CancelMessageRecordConfirm")
        {
            CancelMessageRecord();
        }
        else if (action == "DeleteMessageRecordConfirm")
        {
            await DeleteMessageRecord();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void ClearFormConfirm()
    {
        action = "ClearFormConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearMessageFormConfirm()
    {
        action = "ClearMessageFormConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        msgConfirmTitle = $"Clear Form?";
        msgConfirm = (MarkupString)$"Are you sure you want to clear all information on this form?";

        modalConfirm!.Open();
    }

    private void ClearForm()
    {
        action = "ClearForm";

        selectedRecord = new();

        modalConfirm!.Close();
    }

    private void ClearMessageForm()
    {
        action = "ClearMessageForm";

        selectedMessageRecord = new();

        modalConfirm!.Close();
    }

    protected void ChangeMainRecord(object? sender, FieldChangedEventArgs? e)
    {
        string? fieldName = e?.FieldIdentifier.FieldName;
        string? fieldValue = e?.FieldIdentifier.Model.GetType().GetProperty(fieldName ?? "")?.GetValue(e?.FieldIdentifier.Model)?.ToString();

        fieldValue = StringFunctions.FormatFieldChangedValue(fieldValue);

        if (selectedRecordChanges != null && fieldName != null)
        {
            if (selectedRecordChanges.ContainsKey(fieldName))
            {
                selectedRecordChanges[fieldName] = fieldValue ?? "";
            }
            else
            {
                selectedRecordChanges.Add(fieldName, fieldValue ?? "");
            }
        }
    }

    protected void ChangeMessageRecord(object? sender, FieldChangedEventArgs? e)
    {
        string? fieldName = e?.FieldIdentifier.FieldName;
        string? fieldValue = e?.FieldIdentifier.Model.GetType().GetProperty(fieldName ?? "")?.GetValue(e?.FieldIdentifier.Model)?.ToString();
        //Console.WriteLine($"Field {fieldName} Changed to {fieldValue}");

        fieldValue = StringFunctions.FormatFieldChangedValue(fieldValue);

        if (selectedMessageRecordChanges != null && fieldName != null)
        {
            if (selectedMessageRecordChanges.ContainsKey(fieldName))
            {
                selectedMessageRecordChanges[fieldName] = fieldValue ?? "";
            }
            else
            {
                selectedMessageRecordChanges.Add(fieldName, fieldValue ?? "");
            }
        }

        focusElement = null;
    }

    private void EditMainRecord(int? recordID)
    {
        SelectMainRecord(recordID);

        HasAcceptedOffer = messages?.Where(m => m.VehicleID == selectedRecordCopy?.SubmissionID && m.MessageTypeID == MessageType.ToCustomer && m.IsAccepted == true).Any();
        LastOfferAmount = messages?.Where(m => m.VehicleID == selectedRecordCopy?.SubmissionID && m.MessageTypeID == MessageType.ToCustomer).MaxBy(m => m.AmountOffered)?.AmountOffered;
        LastContacted = messages?.Where(m => m.VehicleID == selectedRecordCopy?.SubmissionID && m.MessageTypeID == MessageType.ToCustomer).MaxBy(m => m.SentDate)?.SentDate;
        MessagesSent = messages?.Where(m => m.VehicleID == selectedRecordCopy?.SubmissionID && m.MessageTypeID == MessageType.ToCustomer).Count();

        SetEditorContextMain();

        ChangeFilterMessage("VehicleID", selectedRecord?.SubmissionID);

        if (selectedRecordCopy != null)
        {
            modalMainRecord!.MakeLarge();
            modalMainRecord!.Open();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Record {recordID}";
            msgError = (MarkupString)$"Unfortunately the record could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task EditMessageRecord(int? recordID)
    {
        SelectMessageRecord(recordID);

        SetEditorContextMessage();

        if (selectedMessageRecordCopy != null)
        {
            modalMessageRecord!.MakeLarge();
            modalMessageRecord!.Open();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Record {recordID}";
            msgError = (MarkupString)$"Unfortunately the record could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task EditMessageRecordFavourite(int? favouriteID)
    {
        SelectMessageRecord(null);

        SetEditorContextMessage();

        if (favouriteID == null || selectedMessageRecordCopy?.MessageTemplate == null)
        {
            return;
        }

        if (favouriteID == 1)
            selectedMessageRecordCopy.MessageTemplate.MessageTemplateID = 1;
        else if (favouriteID == 2)
            selectedMessageRecordCopy.MessageTemplate.MessageTemplateID = 2;
        else if (favouriteID == 3)
            selectedMessageRecordCopy.MessageTemplate.MessageTemplateID = 3;
        else if (favouriteID == 4)
            selectedMessageRecordCopy.MessageTemplate.MessageTemplateID = 4;
        else if (favouriteID == 5)
            selectedMessageRecordCopy.MessageTemplate.MessageTemplateID = 5;
        else if (favouriteID == 6)
            selectedMessageRecordCopy.MessageTemplate.MessageTemplateID = 6;

        if (selectedMessageRecordCopy != null)
        {
            modalMessageRecord!.MakeLarge();
            modalMessageRecord!.Open();

            if (selectedMessageRecordCopy?.MessageTemplate?.MessageTemplateID != null)
            {
                await LoadMessageTemplate(false);
            }
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Cannot Load Favourite Record {favouriteID}";
            msgError = (MarkupString)$"Unfortunately the record could not be loaded due to an error.<br />Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task<bool> SaveMainRecord(bool? CloseDialogAfterSave)
    {
        string? saveEndPoint;
        bool returnValue = false;



        return true;
    }

    private async Task<bool> SaveMessageRecord(bool? CloseDialogAfterSave)
    {
        string? saveEndPoint;
        Messages.SetMessageModel(selectedMessageRecord);
        Messages.SetMessageCopyModel(selectedMessageRecordCopy);
        bool returnValue = await Messages?.SaveMainRecord(CloseDialogAfterSave);

        if (CloseDialogAfterSave == true)
        {
            modalMessageRecord!.Close();
        }
        
        return returnValue;
    }

    private void DeleteMainRecordConfirm()
    {
        if (selectedRecord?.SubmissionID > 0)
        {
            action = "DeleteMainRecordConfirm";
            soundEffect = SoundFunctions.GetPromptSound();

            msgConfirmTitle = $"Confirm Delete?";
            msgConfirm = (MarkupString)$"Are you sure you want to delete the Vehicle \"{selectedRecord.Make}\" {selectedRecord.Model} ({selectedRecord.RegistrationNumber})?";

            modalConfirm!.OpenOnTop1();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"No Vehicle Selected";
            msgError = (MarkupString)$"Please select a Vehicle first before pressing the Delete button or if try to select one again if one had been selected.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void DeleteMessageRecordConfirm()
    {
        if (selectedMessageRecord?.MessageID > 0)
        {
            action = "DeleteMessageRecordConfirm";
            soundEffect = SoundFunctions.GetPromptSound();

            msgConfirmTitle = $"Confirm Delete?";
            msgConfirm = (MarkupString)$"Are you sure you want to delete the message with the Subject \"{selectedMessageRecord.Subject}\" sent to {selectedMessageRecord.To}?";

            modalConfirm!.OpenOnTop1();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"No Message Selected";
            msgError = (MarkupString)$"Please select a Message first before pressing the Delete button or if try to select one again if one had been selected.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task DeleteMainRecord()
    {
        action = "DeleteMainRecord";

        string? deleteEndPoint;

        Logger.LogInformation("Id = {Id}", selectedRecord?.SubmissionID);

        modalConfirm!.Close();

        try
        {
            if (selectedRecord != null)
            {
                VehicleModel formResponse = new VehicleModel();

                if (selectedRecord?.SubmissionID > 0)
                {
                    deleteEndPoint = $"{configuration["APIEndpoint"]}/Vehicle/{selectedRecord?.SubmissionID}";
                    formResponse = await Http.DeleteFromJsonAsync<VehicleModel>(deleteEndPoint) ?? new VehicleModel();

                    if (formResponse.SubmissionID > 0)
                    {
                        //Remove record from screen as well
                        mainRecords?.Remove(selectedRecord!);
                    }
                    else
                    {
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Delete Vehicle Record";
                        msgError = (MarkupString)$"Unfortunately the Vehicle Record could not be deleted successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = null;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"No Vehicle Selected";
                    msgError = (MarkupString)$"Please select a Vehicle first before pressing the Delete button or if try to select one again if one had been selected.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }
            }
            else
            {
                action = "Error";
                soundEffect = SoundFunctions.GetErrorSound();

                msgErrorTitle = $"Cannot Save Vehicle Record";
                msgError = (MarkupString)$"Unfortunately the Vehicle Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "Vehicle", selectedRecord?.SubmissionID.ToString() ?? "0");
        }
    }

    private async Task DeleteMessageRecord()
    {
        action = "DeleteMainRecord";

        string? deleteEndPoint;

        Logger.LogInformation("Id = {Id}", selectedMessageRecord?.MessageID);

        modalConfirm!.Close();

        try
        {
            if (selectedMessageRecord != null)
            {
                MessageModel formResponse = new MessageModel();

                if (selectedMessageRecord?.MessageID > 0)
                {
                    deleteEndPoint = $"{configuration["APIEndpoint"]}/Message/{selectedMessageRecord?.MessageID}";
                    formResponse = await Http.DeleteFromJsonAsync<MessageModel>(deleteEndPoint) ?? new MessageModel();

                    if (formResponse.MessageID > 0)
                    {
                        //Remove record from screen as well
                        messages?.Remove(selectedMessageRecord!);
                    }
                    else
                    {
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Delete Message Record";
                        msgError = (MarkupString)$"Unfortunately the Message Record could not be deleted successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = null;

                        modalError!.Open();
                    }
                }
                else
                {
                    action = "Error";
                    soundEffect = SoundFunctions.GetErrorSound();

                    msgErrorTitle = $"No Message Selected";
                    msgError = (MarkupString)$"Please select a message first before pressing the Delete button or if try to select one again if one had been selected.";
                    msgErrorStackTrace = null;

                    modalError!.Open();
                }
            }
            else
            {
                action = "Error";
                soundEffect = SoundFunctions.GetErrorSound();

                msgErrorTitle = $"Cannot Save Message Record";
                msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
                msgErrorStackTrace = null;

                modalError!.Open();
            }

        }
        catch (HttpRequestException ex)
        {
            HandleJsonException(ex, "Message", selectedMessageRecord?.MessageID.ToString() ?? "0");
        }
    }

    //Additional Functions
    public async Task LoadMessageTemplate(bool? refreshEditor)
    {
        MessageTemplateModel? selectedTemplate = messageTemplates?
            .Where(t => t.MessageTemplateID == selectedMessageRecordCopy?.MessageTemplate?.MessageTemplateID)
            .FirstOrDefault() ?? new();
        Console.WriteLine($"Selected Template {selectedTemplate.MessageTemplateID}");
        if (selectedTemplate != null && selectedMessageRecordCopy != null)
        {
            selectedMessageRecordCopy.Subject = selectedTemplate.TemplateSubject;
            selectedMessageRecordCopy.Message = selectedTemplate.TemplateContent;
            selectedMessageRecordCopy.IncludeAcceptRejectLinks = selectedTemplate.IncludeAcceptRejectLinks;

            if (refreshEditor == true)
            {
                await ReplaceEditorContent(selectedMessageRecordCopy.Message);
            }
        }
    }

    public async Task SendMessage(bool? CloseDialogAfterSave)
    {
        if (await SaveMainRecord(CloseDialogAfterSave) == true)
        {
            //Send email
            if (selectedMessageRecordCopy != null)
            {
                SystemEmailModel emailMessage = new SystemEmailModel
                    {
                        SystemEmailID = 1,
                        EmailFrom = selectedMessageRecordCopy.From,
                        EmailFromName = selectedMessageRecordCopy.FromName,
                        EmailTo = selectedMessageRecordCopy.To,
                        EmailToName = selectedMessageRecordCopy.ToName,
                        EmailCC = "robin.wilson@robindigital.co.uk",
                        EmailBCC = null,
                        EmailSubject = selectedMessageRecordCopy.SubjectProcessed ?? selectedMessageRecordCopy.Subject,
                        EmailMessage = selectedMessageRecordCopy.MessageProcessed ?? selectedMessageRecordCopy.Message,
                        IsEmailMessageHTML = true,
                        EmailKey = configuration.GetSection("Settings")["EmailKey"]
                };

                HttpResponseMessage formResponse = new HttpResponseMessage();
                Console.WriteLine($"Email Subject {emailMessage.EmailSubject}");
                if (emailMessage != null)
                {
                    Logger.LogInformation("Id = {Id}", emailMessage?.SystemEmailID);

                    //Add Accept and Reject Links
                    if (selectedMessageRecordCopy.IncludeAcceptRejectLinks == true && emailMessage != null)
                    {
                        emailMessage.EmailMessage += AcceptRejectButtons();
                    }

                    //Send the Message
                    string? sendEmailEndPoint = $"{configuration["APIEndpoint"]}/SystemEmail";
                    formResponse = await Http.PostAsJsonAsync<SystemEmailModel>(sendEmailEndPoint, emailMessage!);

                    if (formResponse.IsSuccessStatusCode != true)
                    {
                        string responseBody = await formResponse.Content.ReadAsStringAsync();
                        action = "Error";
                        soundEffect = SoundFunctions.GetErrorSound();

                        msgErrorTitle = $"Cannot Send Message";
                        msgError = (MarkupString)$"Unfortunately the Message could not be sent successfully due to an error.<br />Please check your network connection and attempt to save again.";
                        msgErrorStackTrace = responseBody;

                        modalError!.Open();
                    }
                    else
                    {

                        //Insert new record

                        //Get ID of newly inserted record and add new item to model so shows on screen
                        SystemEmailModel emailMessageResponse = await formResponse.Content.ReadFromJsonAsync<SystemEmailModel>() ?? new SystemEmailModel();

                        if (emailMessageResponse.IsSent != null)
                        {
                            selectedMessageRecordCopy.IsSent = emailMessageResponse.IsSent;

                            if (emailMessageResponse.IsSent == false)
                            {
                                action = "Error";
                                soundEffect = SoundFunctions.GetErrorSound();

                                msgErrorTitle = $"Cannot Sent Message";
                                msgError = (MarkupString)$"Unfortunately the Message could not be sent successfully due to an error.<br />Please check your network connection and attempt to save again.";
                                msgErrorStackTrace = null;

                                modalError!.Open();
                            }
                            else {
                                selectedMessageRecordCopy.SentDate = DateTime.Now;
                            }
                        }
                        else
                        {
                            action = "Error";
                            soundEffect = SoundFunctions.GetErrorSound();

                            msgErrorTitle = $"Cannot Sent Message";
                            msgError = (MarkupString)$"Unfortunately the Message could not be sent successfully due to an error.<br />Please check your network connection and attempt to save again.";
                            msgErrorStackTrace = null;

                            modalError!.Open();
                        }
                    }

                    await SaveMessageRecord(true);


                }
            }
        }
    }

    //Common Code
    private void CancelMainRecordConfirm()
    {
        action = "CancelMainRecordConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        string? numberOfChanges = $"{selectedRecordChanges?.Count} {(selectedRecordChanges?.Count == 1 ? "Change" : "Changes")}";
        string? listOfChanges = selectedRecordChanges?.Select(x => $"<li>{x.Key}: {x.Value}</li>").Aggregate((x, y) => $"{x}{y}"); //Aggregation in case of duplication
        string? tableName = selectedRecord?.GetType().Name.Replace("Model", "").GetFieldNameWithSpaces(true) ?? "Record";

        msgConfirmTitle = $"Confirm Cancel?";
        msgConfirm = (MarkupString)$@"
            <p>
                You have made the following changes:<br />
                - {tableName}: {numberOfChanges}:
                <ul>
    {listOfChanges}
                </ul>
            </p>
            <p>
                Are you sure you want to cancel and lose these changes?
            </p>";

        modalConfirm!.OpenOnTop1();
    }

    private void CancelMessageRecordConfirm()
    {
        action = "CancelMessageRecordConfirm";
        soundEffect = SoundFunctions.GetPromptSound();

        string? numberOfChanges = $"{selectedMessageRecordChanges?.Count} {(selectedMessageRecordChanges?.Count == 1 ? "Change" : "Changes")}";
        string? listOfChanges = selectedMessageRecordChanges?.Select(x => $"<li>{x.Key}: {x.Value}</li>").Aggregate((x, y) => $"{x}{y}"); //Aggregation in case of duplication
        string? tableName = selectedMessageRecord?.GetType().Name.Replace("Model", "").GetFieldNameWithSpaces(true) ?? "Record";

        msgConfirmTitle = $"Confirm Cancel?";
        msgConfirm = (MarkupString)$@"
            <p>
                You have made the following changes:<br />
                - {tableName}: {numberOfChanges}:
                <ul>
    {listOfChanges}
                </ul>
            </p>
            <p>
                Are you sure you want to cancel and lose these changes?
            </p>";

        modalConfirm!.OpenOnTop1();
    }

    private void CancelMainRecord()
    {
        //selectedRecord = selectedRecordCopy;

        //Set object back to original values
        if (selectedRecord != null)
        {
            //selectedRecord.Subject = selectedRecordCopy?.Subject;
        }

        // if (selectedRecord != null && selectedRecordCopy != null)
        //     selectedRecordCopy.CopyProperties(selectedRecord);

        //Better way?
        // PropertyInfo[]? properties = selectedRecordCopy?.GetType().GetProperties();
        // if (properties != null)
        // {
        //     foreach (PropertyInfo property in properties)
        //     {
        //         // Get the name and value of each property
        //         string? propertyName = property.Name;
        //         object? propertyValue = property.GetValue(selectedRecord);

        //         //Console.WriteLine($"{propertyName}: {propertyValue}");
        //         selectedRecord?.GetType().GetProperty(propertyName)?.SetValue(selectedRecord, propertyValue);
        //         //selectedRecord?.GetType().GetProperty(propertyName)?.SetValue(selectedRecordCopy, selectedRecordCopy?.GetType().GetProperty(propertyName)?.GetValue(selectedRecordCopy));
        //     }
        // }

        CloseMainRecord();
    }

    private void CancelMessageRecord()
    {
        CloseMessageRecord();
    }

    private void CloseMainRecord()
    {
        modalMainRecord!.Close();
        modalConfirm!.Close();

        selectedRecordChanges?.Clear();
    }

    private void CloseMessageRecord()
    {
        modalMessageRecord!.Close();
        modalConfirm!.Close();

        selectedMessageRecordChanges?.Clear();

        messagePreview = null;
    }

    private async Task GetCursorPosition()
    {
        var cursorPosition = await JSRuntime.InvokeAsync<int>("tinymceInterop.getCursorPosition");
        Logger.LogInformation("Cursor Position: {CursorPosition}", cursorPosition);
    }

    private async Task InsertTextIntoSubject(string? text)
    {
        string? textToInsert = text?.Replace("<", "&lt;").Replace(">", "&gt;");

        Console.WriteLine($"Selected Database Field To Insert into Subject: {textToInsert}");
        await JSRuntime.InvokeVoidAsync("inputInterop.insertTextAtCursor", "subjectInput", textToInsert);
    }

    private async Task AddEditorContent(string? text)
    {
        string? textToInsert = text?.Replace("<", "&lt;").Replace(">", "&gt;");
        Console.WriteLine($"Selected Database Field To Insert into Textarea: {textToInsert}");
        await JSRuntime.InvokeVoidAsync("tinymceInterop.focusEditor");
        await JSRuntime.InvokeVoidAsync("tinymceInterop.insertTextAtCursor", textToInsert);
    }

    private async Task ReplaceEditorContent(string? text)
    {
        string? textToInsert = "testing";

        await JSRuntime.InvokeVoidAsync("tinymceInterop.replaceEditorContent", textToInsert);
        await JSRuntime.InvokeVoidAsync("tinymceInterop.focusEditor");
    }

    private string? focusElement;
    private void SetFocus(string? field)
    {
        focusElement = field;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //await JSRuntime.InvokeVoidAsync("tinymceInterop.initializeEditor", DotNetObjectReference.Create(this));
        // }
    }

    [JSInvokable]
    public void OnEditorBlur()
    {
        focusElement = "Message";
        //Logger.LogInformation("TinyMCE editor lost focus");
    }

    private async Task InsertDatabaseField()
    {
        if (selectedDatabaseField != null)
        {
            if (focusElement == "Subject")
            {
                await InsertTextIntoSubject(selectedDatabaseField);
            }
            else if (focusElement == "Message")
            {
                await AddEditorContent(selectedDatabaseField);
            }
            else 
            {
                // Add as default for now
                await AddEditorContent(selectedDatabaseField);
            }
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Please select a field first using the field selector on the left before pressing the Add Selected Field option";
            msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task InsertDatabaseFieldWithFormat()
    {
        if (selectedDatabaseField != null)
        {
            if (focusElement == "Subject")
            {
                await InsertTextIntoSubject(selectedDatabaseFieldFormatted);
            }
            else if (focusElement == "Message")
            {
                await AddEditorContent(selectedDatabaseFieldFormatted);
            }
            else
            {
                // Add as default for now
                await AddEditorContent(selectedDatabaseFieldFormatted);
            }
            modalFormat!.Close();
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Please select a field first using the field selector on the left before pressing the Add Selected Field option";
            msgError = (MarkupString)$"Unfortunately the Message Record could not be saved successfully due to an error.<br />Please check your network connection and attempt to save again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private void InsertDatabaseFieldFromFormat()
    {

        modalFormat!.OpenOnTop1();
    }

    public void PreviewMessage()
    {
        string? processedSubject = selectedMessageRecordCopy?.Subject;
        string? processedMessage = selectedMessageRecordCopy?.Message;
        MarkupString? preview;

        if (selectedMessageRecordCopy != null)
        {
            processedSubject = ModelFunctions.DoAllDatabaseReplacements(processedSubject, selectedMessageRecordCopy);
            processedMessage = ModelFunctions.DoAllDatabaseReplacements(processedMessage, selectedMessageRecordCopy);
        }
        if (selectedRecordCopy != null)
        {
            processedSubject = ModelFunctions.DoAllDatabaseReplacements(processedSubject, selectedRecordCopy);
            processedMessage = ModelFunctions.DoAllDatabaseReplacements(processedMessage, selectedRecordCopy);
        }

        if (selectedRecordCopy?.Customer != null)
        {
            processedSubject = ModelFunctions.DoAllDatabaseReplacements(processedSubject, selectedRecordCopy.Customer);
            processedMessage = ModelFunctions.DoAllDatabaseReplacements(processedMessage, selectedRecordCopy.Customer);
        }

        if (selectedMessageRecordCopy != null)
        {
            selectedMessageRecordCopy.SubjectProcessed = processedSubject;
            selectedMessageRecordCopy.MessageProcessed = processedMessage;
        }

        preview = (MarkupString?)$@"
            From {selectedMessageRecordCopy?.FromName} &lt;{selectedMessageRecordCopy?.From}&gt;
            <hr />
            To {selectedMessageRecordCopy?.ToName} &lt;{selectedMessageRecordCopy?.To}&gt;
            <hr />
            Subject {selectedMessageRecordCopy?.SubjectProcessed}
            <hr />
            {selectedMessageRecordCopy?.MessageProcessed ?? ""}
            ";

        messagePreview = preview;
    }

    public MarkupString AcceptRejectButtons()
    {
        string? websiteHost = $"{configuration["WebsiteAddress"]}";
        string? url = Path.Combine(websiteHost, "EmailResponse", selectedMessageRecordCopy?.MessageGUID?.ToString() ?? "");
        
        return
            (MarkupString)$@"<a rel='noopener' target='_blank' href='{url}/True' style='background-color: #198754; font-size: 18px; font-family: Helvetica, Arial, sans-serif; font-weight: bold; text-decoration: none; padding: 14px 20px; color: #ffffff; border-radius: 5px; display: inline-block; mso-padding-alt: 0;'>
                <!--[if mso]>
                <i style='letter-spacing: 25px; mso-font-width: -100%; mso-text-raise: 30pt;'>&nbsp;</i>
                <![endif]-->
                <span style='mso-text-raise: 15pt;'>&#10003; Accept Offer</span>
                <!--[if mso]>
                <i style='letter-spacing: 25px; mso-font-width: -100%;'>&nbsp;</i>
                <![endif]-->
            </a>&nbsp;&nbsp;&nbsp;&nbsp;
            <a rel='noopener' target='_blank' href='{url}/False' style='background-color: #dc3545; font-size: 18px; font-family: Helvetica, Arial, sans-serif; font-weight: bold; text-decoration: none; padding: 14px 20px; color: #ffffff; border-radius: 5px; display: inline-block; mso-padding-alt: 0;'>
                <!--[if mso]>
                <i style='letter-spacing: 25px; mso-font-width: -100%; mso-text-raise: 30pt;'>&nbsp;</i>
                <![endif]-->
                <span style='mso-text-raise: 15pt;'>&#10007; Reject Offer</span>
                <!--[if mso]>
                <i style='letter-spacing: 25px; mso-font-width: -100%;'>&nbsp;</i>
                <![endif]-->
            </a>";
    }

    private void HandleJsonException(HttpRequestException ex, string objectName, string objectID)
    {
        if (ex.Message.Contains(HttpStatusCode.Unauthorized.ToString()))
        {
            loadDataErrorMsg = $"You are not authorised to view this page";

            //Redirect to login screen
            NavManager.NavigateTo($"Login/Vehicles");
        }
        else if (ex.Message.Contains("404 (Not Found)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" is not found";
        }
        else if (ex.Message.Contains("400 (Bad Request)"))
        {
            loadDataErrorMsg = $"The {objectName} \"{objectID}\" resulted in an invalid request";
        }
        else
        {
            loadDataErrorMsg = $"Error: {ex.Message}";
        }
    }
}
